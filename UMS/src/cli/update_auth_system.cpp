/**
 * \file update_authentication_system.cpp
 * This file defines the VISHNU update authentication system command
 * \author Ibrahima Cisse (ibrahima.cisse@sysfera.com)
 */

#include "common.hpp"
#include "cliUtil.hpp"
#include "utils.hpp"
#include "authenticationSystemUtils.hpp"
#include "sessionUtils.hpp"
#include "utilVishnu.hpp"
#include <boost/bind.hpp>

#include "GenericCli.hpp"

namespace po = boost::program_options;

using namespace std;
using namespace vishnu;

struct UpdateAuthenticationSystemFunc {

  UMS_Data::AuthSystem mnewAuthsystem;

  UpdateAuthenticationSystemFunc(const UMS_Data::AuthSystem& newAuthsystem):
     mnewAuthsystem(newAuthsystem)
  {};

  int operator()(std::string sessionKey) {


     int res=updateAuthSystem(sessionKey,mnewAuthsystem);

    return res;
  }
};


int main (int ac, char* av[]){


  /******* Parsed value containers ****************/

  string configFile;

  /********** EMF data ************/

  UMS_Data::AuthSystem newAuthsystem;

  /******** Callback functions ******************/

  StringcallBackType fName( boost::bind(&UMS_Data::AuthSystem::setName,boost::ref(newAuthsystem),_1));

  StringcallBackType fURI( boost::bind(&UMS_Data::AuthSystem::setURI,boost::ref(newAuthsystem),_1));

  StringcallBackType fAuthLogin( boost::bind(&UMS_Data::AuthSystem::setAuthLogin,boost::ref(newAuthsystem),_1));

  StringcallBackType fAuthPassword(boost::bind(&UMS_Data::AuthSystem::setAuthPassword,boost::ref(newAuthsystem),_1));

  EncryptioncallBackType fUserPasswordEncryption( boost::bind(&UMS_Data::AuthSystem::setUserPasswordEncryption,boost::ref(newAuthsystem),_1));

  StringcallBackType fAuthSystemId( boost::bind(&UMS_Data::AuthSystem::setAuthSystemId,boost::ref(newAuthsystem),_1));


  AuthcallBackType fType( boost::bind(&UMS_Data::AuthSystem::setType,boost::ref(newAuthsystem),_1));


  StatuscallBackType fStatus ( boost::bind(&UMS_Data::AuthSystem::setStatus,boost::ref(newAuthsystem),_1));

  StringcallBackType fLdapBase(boost::bind(&UMS_Data::AuthSystem::setLdapBase,boost::ref(newAuthsystem),_1));
  /**************** Describe options *************/

boost::shared_ptr<Options> opt= makeAuthSystemOptions(av[0],configFile, fName,
fURI,fAuthLogin,fAuthPassword,fUserPasswordEncryption,fType,fLdapBase);

opt->add("status,s",
    "represents the status of the user-authentication system",
    CONFIG,
    fStatus);

opt->add("authSystemId",
    "is the identifier, generated by VISHNU, of the"
    "user-authentication system",
    HIDDEN,
    fAuthSystemId,
    1);
opt->setPosition("authSystemId",1);



CLICmd cmd = CLICmd (ac, av, opt);

 // Parse the cli and setting the options found
  int ret = cmd.parse(env_name_mapper());

  if (ret != CLI_SUCCESS){
    helpUsage(*opt);
    return ret;
  }

  // PreProcess (adapt some parameters if necessary)
  checkVishnuConfig(*opt);
  if ( opt->count("help")){
    helpUsage(*opt);
    return 0;
  }


  UpdateAuthenticationSystemFunc apiFunc(newAuthsystem);
  return GenericCli().run(apiFunc, configFile, ac, av);

}// end of main
