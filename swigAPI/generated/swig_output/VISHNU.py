# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_VISHNU', [dirname(__file__)])
        except ImportError:
            import _VISHNU
            return _VISHNU
        if fp is not None:
            try:
                _mod = imp.load_module('_VISHNU', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _VISHNU = swig_import_helper()
    del swig_import_helper
else:
    import _VISHNU
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    """Proxy of C++ swig::SwigPyIterator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _VISHNU.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self, *args, **kwargs):
        """value(self) -> PyObject"""
        return _VISHNU.SwigPyIterator_value(self, *args, **kwargs)

    def incr(self, *args, **kwargs):
        """incr(self, size_t n = 1) -> SwigPyIterator"""
        return _VISHNU.SwigPyIterator_incr(self, *args, **kwargs)

    def decr(self, *args, **kwargs):
        """decr(self, size_t n = 1) -> SwigPyIterator"""
        return _VISHNU.SwigPyIterator_decr(self, *args, **kwargs)

    def distance(self, *args, **kwargs):
        """distance(self, SwigPyIterator x) -> ptrdiff_t"""
        return _VISHNU.SwigPyIterator_distance(self, *args, **kwargs)

    def equal(self, *args, **kwargs):
        """equal(self, SwigPyIterator x) -> bool"""
        return _VISHNU.SwigPyIterator_equal(self, *args, **kwargs)

    def copy(self, *args, **kwargs):
        """copy(self) -> SwigPyIterator"""
        return _VISHNU.SwigPyIterator_copy(self, *args, **kwargs)

    def next(self, *args, **kwargs):
        """next(self) -> PyObject"""
        return _VISHNU.SwigPyIterator_next(self, *args, **kwargs)

    def __next__(self, *args, **kwargs):
        """__next__(self) -> PyObject"""
        return _VISHNU.SwigPyIterator___next__(self, *args, **kwargs)

    def previous(self, *args, **kwargs):
        """previous(self) -> PyObject"""
        return _VISHNU.SwigPyIterator_previous(self, *args, **kwargs)

    def advance(self, *args, **kwargs):
        """advance(self, ptrdiff_t n) -> SwigPyIterator"""
        return _VISHNU.SwigPyIterator_advance(self, *args, **kwargs)

    def __eq__(self, *args, **kwargs):
        """__eq__(self, SwigPyIterator x) -> bool"""
        return _VISHNU.SwigPyIterator___eq__(self, *args, **kwargs)

    def __ne__(self, *args, **kwargs):
        """__ne__(self, SwigPyIterator x) -> bool"""
        return _VISHNU.SwigPyIterator___ne__(self, *args, **kwargs)

    def __iadd__(self, *args, **kwargs):
        """__iadd__(self, ptrdiff_t n) -> SwigPyIterator"""
        return _VISHNU.SwigPyIterator___iadd__(self, *args, **kwargs)

    def __isub__(self, *args, **kwargs):
        """__isub__(self, ptrdiff_t n) -> SwigPyIterator"""
        return _VISHNU.SwigPyIterator___isub__(self, *args, **kwargs)

    def __add__(self, *args, **kwargs):
        """__add__(self, ptrdiff_t n) -> SwigPyIterator"""
        return _VISHNU.SwigPyIterator___add__(self, *args, **kwargs)

    def __sub__(self, *args):
        """
        __sub__(self, ptrdiff_t n) -> SwigPyIterator
        __sub__(self, SwigPyIterator x) -> ptrdiff_t
        """
        return _VISHNU.SwigPyIterator___sub__(self, *args)

    def __iter__(self): return self
SwigPyIterator_swigregister = _VISHNU.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class EObject(_object):
    """Proxy of C++ ecore::EObject class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EObject, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(self) -> EObject"""
        this = _VISHNU.new_EObject(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_EObject
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(self)"""
        return _VISHNU.EObject__initialize(self, *args, **kwargs)

    def eClass(self, *args, **kwargs):
        """eClass(self) -> EClass_ptr"""
        return _VISHNU.EObject_eClass(self, *args, **kwargs)

    def eIsProxy(self, *args, **kwargs):
        """eIsProxy(self) -> EBoolean"""
        return _VISHNU.EObject_eIsProxy(self, *args, **kwargs)

    def eResource(self, *args, **kwargs):
        """eResource(self) -> EResource"""
        return _VISHNU.EObject_eResource(self, *args, **kwargs)

    def eContainer(self, *args, **kwargs):
        """eContainer(self) -> EObject_ptr"""
        return _VISHNU.EObject_eContainer(self, *args, **kwargs)

    def eContainingFeature(self, *args, **kwargs):
        """eContainingFeature(self) -> EStructuralFeature_ptr"""
        return _VISHNU.EObject_eContainingFeature(self, *args, **kwargs)

    def eContainmentFeature(self, *args, **kwargs):
        """eContainmentFeature(self) -> EReference_ptr"""
        return _VISHNU.EObject_eContainmentFeature(self, *args, **kwargs)

    def eContents(self, *args, **kwargs):
        """eContents(self) -> std::list<(::ecore::EObject_ptr)>"""
        return _VISHNU.EObject_eContents(self, *args, **kwargs)

    def eAllContents(self, *args, **kwargs):
        """eAllContents(self) -> int"""
        return _VISHNU.EObject_eAllContents(self, *args, **kwargs)

    def eCrossReferences(self, *args, **kwargs):
        """eCrossReferences(self) -> std::list<(::ecore::EObject_ptr)>"""
        return _VISHNU.EObject_eCrossReferences(self, *args, **kwargs)

    def eInvoke(self, *args, **kwargs):
        """eInvoke(self, EOperation_ptr _operation, std::list<(::ecorecpp::mapping::any)> _arguments) -> EJavaObject"""
        return _VISHNU.EObject_eInvoke(self, *args, **kwargs)

    def eGet(self, *args):
        """
        eGet(self, EStructuralFeature_ptr _feature) -> EJavaObject
        eGet(self, EStructuralFeature_ptr _feature, EBoolean _resolve) -> EJavaObject
        eGet(self, EInt _featureID, EBoolean _resolve) -> EJavaObject
        """
        return _VISHNU.EObject_eGet(self, *args)

    def eSet(self, *args):
        """
        eSet(self, EStructuralFeature_ptr _feature, EJavaObject _newValue)
        eSet(self, EInt _featureID, EJavaObject _newValue)
        """
        return _VISHNU.EObject_eSet(self, *args)

    def eIsSet(self, *args):
        """
        eIsSet(self, EStructuralFeature_ptr _feature) -> EBoolean
        eIsSet(self, EInt _featureID) -> EBoolean
        """
        return _VISHNU.EObject_eIsSet(self, *args)

    def eUnset(self, *args):
        """
        eUnset(self, EStructuralFeature_ptr _feature)
        eUnset(self, EInt _featureID)
        """
        return _VISHNU.EObject_eUnset(self, *args)

    def _eClass(self, *args, **kwargs):
        """_eClass(self) -> EClass_ptr"""
        return _VISHNU.EObject__eClass(self, *args, **kwargs)

    def _setEContainer(self, *args, **kwargs):
        """_setEContainer(self, EObject_ptr _eContainer, EStructuralFeature_ptr _eContainingFeature)"""
        return _VISHNU.EObject__setEContainer(self, *args, **kwargs)

EObject_swigregister = _VISHNU.EObject_swigregister
EObject_swigregister(EObject)

class ConnectOptions(EObject):
    """Proxy of C++ UMS_Data::ConnectOptions class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConnectOptions, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConnectOptions, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(self) -> ConnectOptions"""
        this = _VISHNU.new_ConnectOptions(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_ConnectOptions
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(self)"""
        return _VISHNU.ConnectOptions__initialize(self, *args, **kwargs)

    def getClosePolicy(self, *args, **kwargs):
        """getClosePolicy(self) -> SessionCloseType"""
        return _VISHNU.ConnectOptions_getClosePolicy(self, *args, **kwargs)

    def setClosePolicy(self, *args, **kwargs):
        """setClosePolicy(self, SessionCloseType _closePolicy)"""
        return _VISHNU.ConnectOptions_setClosePolicy(self, *args, **kwargs)

    def getSessionInactivityDelay(self, *args, **kwargs):
        """getSessionInactivityDelay(self) -> EInt"""
        return _VISHNU.ConnectOptions_getSessionInactivityDelay(self, *args, **kwargs)

    def setSessionInactivityDelay(self, *args, **kwargs):
        """setSessionInactivityDelay(self, EInt _sessionInactivityDelay)"""
        return _VISHNU.ConnectOptions_setSessionInactivityDelay(self, *args, **kwargs)

    def getSubstituteUserId(self, *args, **kwargs):
        """getSubstituteUserId(self) -> EString"""
        return _VISHNU.ConnectOptions_getSubstituteUserId(self, *args, **kwargs)

    def setSubstituteUserId(self, *args, **kwargs):
        """setSubstituteUserId(self, EString _substituteUserId)"""
        return _VISHNU.ConnectOptions_setSubstituteUserId(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(self, EInt _featureID, EBoolean _resolve) -> EJavaObject"""
        return _VISHNU.ConnectOptions_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(self, EInt _featureID, EJavaObject _newValue)"""
        return _VISHNU.ConnectOptions_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(self, EInt _featureID) -> EBoolean"""
        return _VISHNU.ConnectOptions_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(self, EInt _featureID)"""
        return _VISHNU.ConnectOptions_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(self) -> EClass_ptr"""
        return _VISHNU.ConnectOptions__eClass(self, *args, **kwargs)

ConnectOptions_swigregister = _VISHNU.ConnectOptions_swigregister
ConnectOptions_swigregister(ConnectOptions)

class Session(EObject):
    """Proxy of C++ UMS_Data::Session class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Session, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Session, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(self) -> Session"""
        this = _VISHNU.new_Session(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_Session
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(self)"""
        return _VISHNU.Session__initialize(self, *args, **kwargs)

    def getSessionId(self, *args, **kwargs):
        """getSessionId(self) -> EString"""
        return _VISHNU.Session_getSessionId(self, *args, **kwargs)

    def setSessionId(self, *args, **kwargs):
        """setSessionId(self, EString _sessionId)"""
        return _VISHNU.Session_setSessionId(self, *args, **kwargs)

    def getUserId(self, *args, **kwargs):
        """getUserId(self) -> EString"""
        return _VISHNU.Session_getUserId(self, *args, **kwargs)

    def setUserId(self, *args, **kwargs):
        """setUserId(self, EString _userId)"""
        return _VISHNU.Session_setUserId(self, *args, **kwargs)

    def getSessionKey(self, *args, **kwargs):
        """getSessionKey(self) -> EString"""
        return _VISHNU.Session_getSessionKey(self, *args, **kwargs)

    def setSessionKey(self, *args, **kwargs):
        """setSessionKey(self, EString _sessionKey)"""
        return _VISHNU.Session_setSessionKey(self, *args, **kwargs)

    def getDateLastConnect(self, *args, **kwargs):
        """getDateLastConnect(self) -> ELong"""
        return _VISHNU.Session_getDateLastConnect(self, *args, **kwargs)

    def setDateLastConnect(self, *args, **kwargs):
        """setDateLastConnect(self, ELong _dateLastConnect)"""
        return _VISHNU.Session_setDateLastConnect(self, *args, **kwargs)

    def getDateCreation(self, *args, **kwargs):
        """getDateCreation(self) -> ELong"""
        return _VISHNU.Session_getDateCreation(self, *args, **kwargs)

    def setDateCreation(self, *args, **kwargs):
        """setDateCreation(self, ELong _dateCreation)"""
        return _VISHNU.Session_setDateCreation(self, *args, **kwargs)

    def getDateClosure(self, *args, **kwargs):
        """getDateClosure(self) -> ELong"""
        return _VISHNU.Session_getDateClosure(self, *args, **kwargs)

    def setDateClosure(self, *args, **kwargs):
        """setDateClosure(self, ELong _dateClosure)"""
        return _VISHNU.Session_setDateClosure(self, *args, **kwargs)

    def getStatus(self, *args, **kwargs):
        """getStatus(self) -> StatusType"""
        return _VISHNU.Session_getStatus(self, *args, **kwargs)

    def setStatus(self, *args, **kwargs):
        """setStatus(self, StatusType _status)"""
        return _VISHNU.Session_setStatus(self, *args, **kwargs)

    def getClosePolicy(self, *args, **kwargs):
        """getClosePolicy(self) -> SessionCloseType"""
        return _VISHNU.Session_getClosePolicy(self, *args, **kwargs)

    def setClosePolicy(self, *args, **kwargs):
        """setClosePolicy(self, SessionCloseType _closePolicy)"""
        return _VISHNU.Session_setClosePolicy(self, *args, **kwargs)

    def getTimeout(self, *args, **kwargs):
        """getTimeout(self) -> ELong"""
        return _VISHNU.Session_getTimeout(self, *args, **kwargs)

    def setTimeout(self, *args, **kwargs):
        """setTimeout(self, ELong _timeout)"""
        return _VISHNU.Session_setTimeout(self, *args, **kwargs)

    def getAuthenId(self, *args, **kwargs):
        """getAuthenId(self) -> EString"""
        return _VISHNU.Session_getAuthenId(self, *args, **kwargs)

    def setAuthenId(self, *args, **kwargs):
        """setAuthenId(self, EString _authenId)"""
        return _VISHNU.Session_setAuthenId(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(self, EInt _featureID, EBoolean _resolve) -> EJavaObject"""
        return _VISHNU.Session_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(self, EInt _featureID, EJavaObject _newValue)"""
        return _VISHNU.Session_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(self, EInt _featureID) -> EBoolean"""
        return _VISHNU.Session_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(self, EInt _featureID)"""
        return _VISHNU.Session_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(self) -> EClass_ptr"""
        return _VISHNU.Session__eClass(self, *args, **kwargs)

Session_swigregister = _VISHNU.Session_swigregister
Session_swigregister(Session)

class ListUsersOptions(EObject):
    """Proxy of C++ UMS_Data::ListUsersOptions class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListUsersOptions, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListUsersOptions, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(self) -> ListUsersOptions"""
        this = _VISHNU.new_ListUsersOptions(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_ListUsersOptions
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(self)"""
        return _VISHNU.ListUsersOptions__initialize(self, *args, **kwargs)

    def getUserId(self, *args, **kwargs):
        """getUserId(self) -> EString"""
        return _VISHNU.ListUsersOptions_getUserId(self, *args, **kwargs)

    def setUserId(self, *args, **kwargs):
        """setUserId(self, EString _userId)"""
        return _VISHNU.ListUsersOptions_setUserId(self, *args, **kwargs)

    def getAuthSystemId(self, *args, **kwargs):
        """getAuthSystemId(self) -> EString"""
        return _VISHNU.ListUsersOptions_getAuthSystemId(self, *args, **kwargs)

    def setAuthSystemId(self, *args, **kwargs):
        """setAuthSystemId(self, EString _authSystemId)"""
        return _VISHNU.ListUsersOptions_setAuthSystemId(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(self, EInt _featureID, EBoolean _resolve) -> EJavaObject"""
        return _VISHNU.ListUsersOptions_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(self, EInt _featureID, EJavaObject _newValue)"""
        return _VISHNU.ListUsersOptions_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(self, EInt _featureID) -> EBoolean"""
        return _VISHNU.ListUsersOptions_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(self, EInt _featureID)"""
        return _VISHNU.ListUsersOptions_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(self) -> EClass_ptr"""
        return _VISHNU.ListUsersOptions__eClass(self, *args, **kwargs)

ListUsersOptions_swigregister = _VISHNU.ListUsersOptions_swigregister
ListUsersOptions_swigregister(ListUsersOptions)

class ListSessionOptions(EObject):
    """Proxy of C++ UMS_Data::ListSessionOptions class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListSessionOptions, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListSessionOptions, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(self) -> ListSessionOptions"""
        this = _VISHNU.new_ListSessionOptions(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_ListSessionOptions
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(self)"""
        return _VISHNU.ListSessionOptions__initialize(self, *args, **kwargs)

    def getStatus(self, *args, **kwargs):
        """getStatus(self) -> StatusType"""
        return _VISHNU.ListSessionOptions_getStatus(self, *args, **kwargs)

    def setStatus(self, *args, **kwargs):
        """setStatus(self, StatusType _status)"""
        return _VISHNU.ListSessionOptions_setStatus(self, *args, **kwargs)

    def getSessionClosePolicy(self, *args, **kwargs):
        """getSessionClosePolicy(self) -> SessionCloseType"""
        return _VISHNU.ListSessionOptions_getSessionClosePolicy(self, *args, **kwargs)

    def setSessionClosePolicy(self, *args, **kwargs):
        """setSessionClosePolicy(self, SessionCloseType _sessionClosePolicy)"""
        return _VISHNU.ListSessionOptions_setSessionClosePolicy(self, *args, **kwargs)

    def getSessionInactivityDelay(self, *args, **kwargs):
        """getSessionInactivityDelay(self) -> EInt"""
        return _VISHNU.ListSessionOptions_getSessionInactivityDelay(self, *args, **kwargs)

    def setSessionInactivityDelay(self, *args, **kwargs):
        """setSessionInactivityDelay(self, EInt _sessionInactivityDelay)"""
        return _VISHNU.ListSessionOptions_setSessionInactivityDelay(self, *args, **kwargs)

    def getMachineId(self, *args, **kwargs):
        """getMachineId(self) -> EString"""
        return _VISHNU.ListSessionOptions_getMachineId(self, *args, **kwargs)

    def setMachineId(self, *args, **kwargs):
        """setMachineId(self, EString _machineId)"""
        return _VISHNU.ListSessionOptions_setMachineId(self, *args, **kwargs)

    def isAdminListOption(self, *args, **kwargs):
        """isAdminListOption(self) -> EBoolean"""
        return _VISHNU.ListSessionOptions_isAdminListOption(self, *args, **kwargs)

    def setAdminListOption(self, *args, **kwargs):
        """setAdminListOption(self, EBoolean _adminListOption)"""
        return _VISHNU.ListSessionOptions_setAdminListOption(self, *args, **kwargs)

    def getUserId(self, *args, **kwargs):
        """getUserId(self) -> EString"""
        return _VISHNU.ListSessionOptions_getUserId(self, *args, **kwargs)

    def setUserId(self, *args, **kwargs):
        """setUserId(self, EString _userId)"""
        return _VISHNU.ListSessionOptions_setUserId(self, *args, **kwargs)

    def getSessionId(self, *args, **kwargs):
        """getSessionId(self) -> EString"""
        return _VISHNU.ListSessionOptions_getSessionId(self, *args, **kwargs)

    def setSessionId(self, *args, **kwargs):
        """setSessionId(self, EString _sessionId)"""
        return _VISHNU.ListSessionOptions_setSessionId(self, *args, **kwargs)

    def getStartDateOption(self, *args, **kwargs):
        """getStartDateOption(self) -> ELong"""
        return _VISHNU.ListSessionOptions_getStartDateOption(self, *args, **kwargs)

    def setStartDateOption(self, *args, **kwargs):
        """setStartDateOption(self, ELong _startDateOption)"""
        return _VISHNU.ListSessionOptions_setStartDateOption(self, *args, **kwargs)

    def getEndDateOption(self, *args, **kwargs):
        """getEndDateOption(self) -> ELong"""
        return _VISHNU.ListSessionOptions_getEndDateOption(self, *args, **kwargs)

    def setEndDateOption(self, *args, **kwargs):
        """setEndDateOption(self, ELong _endDateOption)"""
        return _VISHNU.ListSessionOptions_setEndDateOption(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(self, EInt _featureID, EBoolean _resolve) -> EJavaObject"""
        return _VISHNU.ListSessionOptions_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(self, EInt _featureID, EJavaObject _newValue)"""
        return _VISHNU.ListSessionOptions_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(self, EInt _featureID) -> EBoolean"""
        return _VISHNU.ListSessionOptions_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(self, EInt _featureID)"""
        return _VISHNU.ListSessionOptions_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(self) -> EClass_ptr"""
        return _VISHNU.ListSessionOptions__eClass(self, *args, **kwargs)

ListSessionOptions_swigregister = _VISHNU.ListSessionOptions_swigregister
ListSessionOptions_swigregister(ListSessionOptions)

class User(EObject):
    """Proxy of C++ UMS_Data::User class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, User, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, User, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(self) -> User"""
        this = _VISHNU.new_User(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_User
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(self)"""
        return _VISHNU.User__initialize(self, *args, **kwargs)

    def getUserId(self, *args, **kwargs):
        """getUserId(self) -> EString"""
        return _VISHNU.User_getUserId(self, *args, **kwargs)

    def setUserId(self, *args, **kwargs):
        """setUserId(self, EString _userId)"""
        return _VISHNU.User_setUserId(self, *args, **kwargs)

    def getPassword(self, *args, **kwargs):
        """getPassword(self) -> EString"""
        return _VISHNU.User_getPassword(self, *args, **kwargs)

    def setPassword(self, *args, **kwargs):
        """setPassword(self, EString _password)"""
        return _VISHNU.User_setPassword(self, *args, **kwargs)

    def getFirstname(self, *args, **kwargs):
        """getFirstname(self) -> EString"""
        return _VISHNU.User_getFirstname(self, *args, **kwargs)

    def setFirstname(self, *args, **kwargs):
        """setFirstname(self, EString _firstname)"""
        return _VISHNU.User_setFirstname(self, *args, **kwargs)

    def getLastname(self, *args, **kwargs):
        """getLastname(self) -> EString"""
        return _VISHNU.User_getLastname(self, *args, **kwargs)

    def setLastname(self, *args, **kwargs):
        """setLastname(self, EString _lastname)"""
        return _VISHNU.User_setLastname(self, *args, **kwargs)

    def getPrivilege(self, *args, **kwargs):
        """getPrivilege(self) -> PrivilegeType"""
        return _VISHNU.User_getPrivilege(self, *args, **kwargs)

    def setPrivilege(self, *args, **kwargs):
        """setPrivilege(self, PrivilegeType _privilege)"""
        return _VISHNU.User_setPrivilege(self, *args, **kwargs)

    def getEmail(self, *args, **kwargs):
        """getEmail(self) -> EString"""
        return _VISHNU.User_getEmail(self, *args, **kwargs)

    def setEmail(self, *args, **kwargs):
        """setEmail(self, EString _email)"""
        return _VISHNU.User_setEmail(self, *args, **kwargs)

    def getStatus(self, *args, **kwargs):
        """getStatus(self) -> StatusType"""
        return _VISHNU.User_getStatus(self, *args, **kwargs)

    def setStatus(self, *args, **kwargs):
        """setStatus(self, StatusType _status)"""
        return _VISHNU.User_setStatus(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(self, EInt _featureID, EBoolean _resolve) -> EJavaObject"""
        return _VISHNU.User_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(self, EInt _featureID, EJavaObject _newValue)"""
        return _VISHNU.User_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(self, EInt _featureID) -> EBoolean"""
        return _VISHNU.User_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(self, EInt _featureID)"""
        return _VISHNU.User_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(self) -> EClass_ptr"""
        return _VISHNU.User__eClass(self, *args, **kwargs)

User_swigregister = _VISHNU.User_swigregister
User_swigregister(User)

class Command(EObject):
    """Proxy of C++ UMS_Data::Command class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Command, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Command, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(self) -> Command"""
        this = _VISHNU.new_Command(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_Command
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(self)"""
        return _VISHNU.Command__initialize(self, *args, **kwargs)

    def getCommandId(self, *args, **kwargs):
        """getCommandId(self) -> EString"""
        return _VISHNU.Command_getCommandId(self, *args, **kwargs)

    def setCommandId(self, *args, **kwargs):
        """setCommandId(self, EString _commandId)"""
        return _VISHNU.Command_setCommandId(self, *args, **kwargs)

    def getSessionId(self, *args, **kwargs):
        """getSessionId(self) -> EString"""
        return _VISHNU.Command_getSessionId(self, *args, **kwargs)

    def setSessionId(self, *args, **kwargs):
        """setSessionId(self, EString _sessionId)"""
        return _VISHNU.Command_setSessionId(self, *args, **kwargs)

    def getMachineId(self, *args, **kwargs):
        """getMachineId(self) -> EString"""
        return _VISHNU.Command_getMachineId(self, *args, **kwargs)

    def setMachineId(self, *args, **kwargs):
        """setMachineId(self, EString _machineId)"""
        return _VISHNU.Command_setMachineId(self, *args, **kwargs)

    def getCmdDescription(self, *args, **kwargs):
        """getCmdDescription(self) -> EString"""
        return _VISHNU.Command_getCmdDescription(self, *args, **kwargs)

    def setCmdDescription(self, *args, **kwargs):
        """setCmdDescription(self, EString _cmdDescription)"""
        return _VISHNU.Command_setCmdDescription(self, *args, **kwargs)

    def getCmdStartTime(self, *args, **kwargs):
        """getCmdStartTime(self) -> ELong"""
        return _VISHNU.Command_getCmdStartTime(self, *args, **kwargs)

    def setCmdStartTime(self, *args, **kwargs):
        """setCmdStartTime(self, ELong _cmdStartTime)"""
        return _VISHNU.Command_setCmdStartTime(self, *args, **kwargs)

    def getCmdEndTime(self, *args, **kwargs):
        """getCmdEndTime(self) -> ELong"""
        return _VISHNU.Command_getCmdEndTime(self, *args, **kwargs)

    def setCmdEndTime(self, *args, **kwargs):
        """setCmdEndTime(self, ELong _cmdEndTime)"""
        return _VISHNU.Command_setCmdEndTime(self, *args, **kwargs)

    def getStatus(self, *args, **kwargs):
        """getStatus(self) -> CommandStatusType"""
        return _VISHNU.Command_getStatus(self, *args, **kwargs)

    def setStatus(self, *args, **kwargs):
        """setStatus(self, CommandStatusType _status)"""
        return _VISHNU.Command_setStatus(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(self, EInt _featureID, EBoolean _resolve) -> EJavaObject"""
        return _VISHNU.Command_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(self, EInt _featureID, EJavaObject _newValue)"""
        return _VISHNU.Command_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(self, EInt _featureID) -> EBoolean"""
        return _VISHNU.Command_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(self, EInt _featureID)"""
        return _VISHNU.Command_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(self) -> EClass_ptr"""
        return _VISHNU.Command__eClass(self, *args, **kwargs)

Command_swigregister = _VISHNU.Command_swigregister
Command_swigregister(Command)

class ListCmdOptions(EObject):
    """Proxy of C++ UMS_Data::ListCmdOptions class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListCmdOptions, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListCmdOptions, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(self) -> ListCmdOptions"""
        this = _VISHNU.new_ListCmdOptions(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_ListCmdOptions
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(self)"""
        return _VISHNU.ListCmdOptions__initialize(self, *args, **kwargs)

    def isAdminListOption(self, *args, **kwargs):
        """isAdminListOption(self) -> EBoolean"""
        return _VISHNU.ListCmdOptions_isAdminListOption(self, *args, **kwargs)

    def setAdminListOption(self, *args, **kwargs):
        """setAdminListOption(self, EBoolean _adminListOption)"""
        return _VISHNU.ListCmdOptions_setAdminListOption(self, *args, **kwargs)

    def getUserId(self, *args, **kwargs):
        """getUserId(self) -> EString"""
        return _VISHNU.ListCmdOptions_getUserId(self, *args, **kwargs)

    def setUserId(self, *args, **kwargs):
        """setUserId(self, EString _userId)"""
        return _VISHNU.ListCmdOptions_setUserId(self, *args, **kwargs)

    def getSessionId(self, *args, **kwargs):
        """getSessionId(self) -> EString"""
        return _VISHNU.ListCmdOptions_getSessionId(self, *args, **kwargs)

    def setSessionId(self, *args, **kwargs):
        """setSessionId(self, EString _sessionId)"""
        return _VISHNU.ListCmdOptions_setSessionId(self, *args, **kwargs)

    def getStartDateOption(self, *args, **kwargs):
        """getStartDateOption(self) -> ELong"""
        return _VISHNU.ListCmdOptions_getStartDateOption(self, *args, **kwargs)

    def setStartDateOption(self, *args, **kwargs):
        """setStartDateOption(self, ELong _startDateOption)"""
        return _VISHNU.ListCmdOptions_setStartDateOption(self, *args, **kwargs)

    def getEndDateOption(self, *args, **kwargs):
        """getEndDateOption(self) -> ELong"""
        return _VISHNU.ListCmdOptions_getEndDateOption(self, *args, **kwargs)

    def setEndDateOption(self, *args, **kwargs):
        """setEndDateOption(self, ELong _endDateOption)"""
        return _VISHNU.ListCmdOptions_setEndDateOption(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(self, EInt _featureID, EBoolean _resolve) -> EJavaObject"""
        return _VISHNU.ListCmdOptions_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(self, EInt _featureID, EJavaObject _newValue)"""
        return _VISHNU.ListCmdOptions_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(self, EInt _featureID) -> EBoolean"""
        return _VISHNU.ListCmdOptions_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(self, EInt _featureID)"""
        return _VISHNU.ListCmdOptions_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(self) -> EClass_ptr"""
        return _VISHNU.ListCmdOptions__eClass(self, *args, **kwargs)

ListCmdOptions_swigregister = _VISHNU.ListCmdOptions_swigregister
ListCmdOptions_swigregister(ListCmdOptions)

class LocalAccount(EObject):
    """Proxy of C++ UMS_Data::LocalAccount class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LocalAccount, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LocalAccount, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(self) -> LocalAccount"""
        this = _VISHNU.new_LocalAccount(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_LocalAccount
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(self)"""
        return _VISHNU.LocalAccount__initialize(self, *args, **kwargs)

    def getUserId(self, *args, **kwargs):
        """getUserId(self) -> EString"""
        return _VISHNU.LocalAccount_getUserId(self, *args, **kwargs)

    def setUserId(self, *args, **kwargs):
        """setUserId(self, EString _userId)"""
        return _VISHNU.LocalAccount_setUserId(self, *args, **kwargs)

    def getMachineId(self, *args, **kwargs):
        """getMachineId(self) -> EString"""
        return _VISHNU.LocalAccount_getMachineId(self, *args, **kwargs)

    def setMachineId(self, *args, **kwargs):
        """setMachineId(self, EString _machineId)"""
        return _VISHNU.LocalAccount_setMachineId(self, *args, **kwargs)

    def getAcLogin(self, *args, **kwargs):
        """getAcLogin(self) -> EString"""
        return _VISHNU.LocalAccount_getAcLogin(self, *args, **kwargs)

    def setAcLogin(self, *args, **kwargs):
        """setAcLogin(self, EString _acLogin)"""
        return _VISHNU.LocalAccount_setAcLogin(self, *args, **kwargs)

    def getSshKeyPath(self, *args, **kwargs):
        """getSshKeyPath(self) -> EString"""
        return _VISHNU.LocalAccount_getSshKeyPath(self, *args, **kwargs)

    def setSshKeyPath(self, *args, **kwargs):
        """setSshKeyPath(self, EString _sshKeyPath)"""
        return _VISHNU.LocalAccount_setSshKeyPath(self, *args, **kwargs)

    def getHomeDirectory(self, *args, **kwargs):
        """getHomeDirectory(self) -> EString"""
        return _VISHNU.LocalAccount_getHomeDirectory(self, *args, **kwargs)

    def setHomeDirectory(self, *args, **kwargs):
        """setHomeDirectory(self, EString _homeDirectory)"""
        return _VISHNU.LocalAccount_setHomeDirectory(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(self, EInt _featureID, EBoolean _resolve) -> EJavaObject"""
        return _VISHNU.LocalAccount_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(self, EInt _featureID, EJavaObject _newValue)"""
        return _VISHNU.LocalAccount_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(self, EInt _featureID) -> EBoolean"""
        return _VISHNU.LocalAccount_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(self, EInt _featureID)"""
        return _VISHNU.LocalAccount_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(self) -> EClass_ptr"""
        return _VISHNU.LocalAccount__eClass(self, *args, **kwargs)

LocalAccount_swigregister = _VISHNU.LocalAccount_swigregister
LocalAccount_swigregister(LocalAccount)

class ListLocalAccOptions(EObject):
    """Proxy of C++ UMS_Data::ListLocalAccOptions class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListLocalAccOptions, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListLocalAccOptions, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(self) -> ListLocalAccOptions"""
        this = _VISHNU.new_ListLocalAccOptions(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_ListLocalAccOptions
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(self)"""
        return _VISHNU.ListLocalAccOptions__initialize(self, *args, **kwargs)

    def isAdminListOption(self, *args, **kwargs):
        """isAdminListOption(self) -> EBoolean"""
        return _VISHNU.ListLocalAccOptions_isAdminListOption(self, *args, **kwargs)

    def setAdminListOption(self, *args, **kwargs):
        """setAdminListOption(self, EBoolean _adminListOption)"""
        return _VISHNU.ListLocalAccOptions_setAdminListOption(self, *args, **kwargs)

    def getUserId(self, *args, **kwargs):
        """getUserId(self) -> EString"""
        return _VISHNU.ListLocalAccOptions_getUserId(self, *args, **kwargs)

    def setUserId(self, *args, **kwargs):
        """setUserId(self, EString _userId)"""
        return _VISHNU.ListLocalAccOptions_setUserId(self, *args, **kwargs)

    def getMachineId(self, *args, **kwargs):
        """getMachineId(self) -> EString"""
        return _VISHNU.ListLocalAccOptions_getMachineId(self, *args, **kwargs)

    def setMachineId(self, *args, **kwargs):
        """setMachineId(self, EString _machineId)"""
        return _VISHNU.ListLocalAccOptions_setMachineId(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(self, EInt _featureID, EBoolean _resolve) -> EJavaObject"""
        return _VISHNU.ListLocalAccOptions_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(self, EInt _featureID, EJavaObject _newValue)"""
        return _VISHNU.ListLocalAccOptions_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(self, EInt _featureID) -> EBoolean"""
        return _VISHNU.ListLocalAccOptions_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(self, EInt _featureID)"""
        return _VISHNU.ListLocalAccOptions_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(self) -> EClass_ptr"""
        return _VISHNU.ListLocalAccOptions__eClass(self, *args, **kwargs)

ListLocalAccOptions_swigregister = _VISHNU.ListLocalAccOptions_swigregister
ListLocalAccOptions_swigregister(ListLocalAccOptions)

class Machine(EObject):
    """Proxy of C++ UMS_Data::Machine class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Machine, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Machine, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(self) -> Machine"""
        this = _VISHNU.new_Machine(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_Machine
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(self)"""
        return _VISHNU.Machine__initialize(self, *args, **kwargs)

    def getMachineId(self, *args, **kwargs):
        """getMachineId(self) -> EString"""
        return _VISHNU.Machine_getMachineId(self, *args, **kwargs)

    def setMachineId(self, *args, **kwargs):
        """setMachineId(self, EString _machineId)"""
        return _VISHNU.Machine_setMachineId(self, *args, **kwargs)

    def getName(self, *args, **kwargs):
        """getName(self) -> EString"""
        return _VISHNU.Machine_getName(self, *args, **kwargs)

    def setName(self, *args, **kwargs):
        """setName(self, EString _name)"""
        return _VISHNU.Machine_setName(self, *args, **kwargs)

    def getSite(self, *args, **kwargs):
        """getSite(self) -> EString"""
        return _VISHNU.Machine_getSite(self, *args, **kwargs)

    def setSite(self, *args, **kwargs):
        """setSite(self, EString _site)"""
        return _VISHNU.Machine_setSite(self, *args, **kwargs)

    def getMachineDescription(self, *args, **kwargs):
        """getMachineDescription(self) -> EString"""
        return _VISHNU.Machine_getMachineDescription(self, *args, **kwargs)

    def setMachineDescription(self, *args, **kwargs):
        """setMachineDescription(self, EString _machineDescription)"""
        return _VISHNU.Machine_setMachineDescription(self, *args, **kwargs)

    def getLanguage(self, *args, **kwargs):
        """getLanguage(self) -> EString"""
        return _VISHNU.Machine_getLanguage(self, *args, **kwargs)

    def setLanguage(self, *args, **kwargs):
        """setLanguage(self, EString _language)"""
        return _VISHNU.Machine_setLanguage(self, *args, **kwargs)

    def getStatus(self, *args, **kwargs):
        """getStatus(self) -> StatusType"""
        return _VISHNU.Machine_getStatus(self, *args, **kwargs)

    def setStatus(self, *args, **kwargs):
        """setStatus(self, StatusType _status)"""
        return _VISHNU.Machine_setStatus(self, *args, **kwargs)

    def getSshPublicKey(self, *args, **kwargs):
        """getSshPublicKey(self) -> EString"""
        return _VISHNU.Machine_getSshPublicKey(self, *args, **kwargs)

    def setSshPublicKey(self, *args, **kwargs):
        """setSshPublicKey(self, EString _sshPublicKey)"""
        return _VISHNU.Machine_setSshPublicKey(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(self, EInt _featureID, EBoolean _resolve) -> EJavaObject"""
        return _VISHNU.Machine_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(self, EInt _featureID, EJavaObject _newValue)"""
        return _VISHNU.Machine_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(self, EInt _featureID) -> EBoolean"""
        return _VISHNU.Machine_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(self, EInt _featureID)"""
        return _VISHNU.Machine_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(self) -> EClass_ptr"""
        return _VISHNU.Machine__eClass(self, *args, **kwargs)

Machine_swigregister = _VISHNU.Machine_swigregister
Machine_swigregister(Machine)

class ListMachineOptions(EObject):
    """Proxy of C++ UMS_Data::ListMachineOptions class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListMachineOptions, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListMachineOptions, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(self) -> ListMachineOptions"""
        this = _VISHNU.new_ListMachineOptions(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_ListMachineOptions
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(self)"""
        return _VISHNU.ListMachineOptions__initialize(self, *args, **kwargs)

    def getUserId(self, *args, **kwargs):
        """getUserId(self) -> EString"""
        return _VISHNU.ListMachineOptions_getUserId(self, *args, **kwargs)

    def setUserId(self, *args, **kwargs):
        """setUserId(self, EString _userId)"""
        return _VISHNU.ListMachineOptions_setUserId(self, *args, **kwargs)

    def isListAllMachine(self, *args, **kwargs):
        """isListAllMachine(self) -> EBoolean"""
        return _VISHNU.ListMachineOptions_isListAllMachine(self, *args, **kwargs)

    def setListAllMachine(self, *args, **kwargs):
        """setListAllMachine(self, EBoolean _listAllMachine)"""
        return _VISHNU.ListMachineOptions_setListAllMachine(self, *args, **kwargs)

    def getMachineId(self, *args, **kwargs):
        """getMachineId(self) -> EString"""
        return _VISHNU.ListMachineOptions_getMachineId(self, *args, **kwargs)

    def setMachineId(self, *args, **kwargs):
        """setMachineId(self, EString _machineId)"""
        return _VISHNU.ListMachineOptions_setMachineId(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(self, EInt _featureID, EBoolean _resolve) -> EJavaObject"""
        return _VISHNU.ListMachineOptions_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(self, EInt _featureID, EJavaObject _newValue)"""
        return _VISHNU.ListMachineOptions_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(self, EInt _featureID) -> EBoolean"""
        return _VISHNU.ListMachineOptions_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(self, EInt _featureID)"""
        return _VISHNU.ListMachineOptions_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(self) -> EClass_ptr"""
        return _VISHNU.ListMachineOptions__eClass(self, *args, **kwargs)

ListMachineOptions_swigregister = _VISHNU.ListMachineOptions_swigregister
ListMachineOptions_swigregister(ListMachineOptions)

class Configuration(EObject):
    """Proxy of C++ UMS_Data::Configuration class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Configuration, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Configuration, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(self) -> Configuration"""
        this = _VISHNU.new_Configuration(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_Configuration
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(self)"""
        return _VISHNU.Configuration__initialize(self, *args, **kwargs)

    def getFilePath(self, *args, **kwargs):
        """getFilePath(self) -> EString"""
        return _VISHNU.Configuration_getFilePath(self, *args, **kwargs)

    def setFilePath(self, *args, **kwargs):
        """setFilePath(self, EString _filePath)"""
        return _VISHNU.Configuration_setFilePath(self, *args, **kwargs)

    def getListConfUsers(self, *args, **kwargs):
        """getListConfUsers(self) -> ::ecorecpp::mapping::EList<(::UMS_Data::User)>"""
        return _VISHNU.Configuration_getListConfUsers(self, *args, **kwargs)

    def getListConfMachines(self, *args, **kwargs):
        """getListConfMachines(self) -> ::ecorecpp::mapping::EList<(::UMS_Data::Machine)>"""
        return _VISHNU.Configuration_getListConfMachines(self, *args, **kwargs)

    def getListConfLocalAccounts(self, *args, **kwargs):
        """getListConfLocalAccounts(self) -> ::ecorecpp::mapping::EList<(::UMS_Data::LocalAccount)>"""
        return _VISHNU.Configuration_getListConfLocalAccounts(self, *args, **kwargs)

    def getListConfAuthSystems(self, *args, **kwargs):
        """getListConfAuthSystems(self) -> ::ecorecpp::mapping::EList<(::UMS_Data::AuthSystem)>"""
        return _VISHNU.Configuration_getListConfAuthSystems(self, *args, **kwargs)

    def getListConfAuthAccounts(self, *args, **kwargs):
        """getListConfAuthAccounts(self) -> ::ecorecpp::mapping::EList<(::UMS_Data::AuthAccount)>"""
        return _VISHNU.Configuration_getListConfAuthAccounts(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(self, EInt _featureID, EBoolean _resolve) -> EJavaObject"""
        return _VISHNU.Configuration_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(self, EInt _featureID, EJavaObject _newValue)"""
        return _VISHNU.Configuration_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(self, EInt _featureID) -> EBoolean"""
        return _VISHNU.Configuration_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(self, EInt _featureID)"""
        return _VISHNU.Configuration_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(self) -> EClass_ptr"""
        return _VISHNU.Configuration__eClass(self, *args, **kwargs)

Configuration_swigregister = _VISHNU.Configuration_swigregister
Configuration_swigregister(Configuration)

class OptionValue(EObject):
    """Proxy of C++ UMS_Data::OptionValue class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionValue, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptionValue, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(self) -> OptionValue"""
        this = _VISHNU.new_OptionValue(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_OptionValue
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(self)"""
        return _VISHNU.OptionValue__initialize(self, *args, **kwargs)

    def getOptionName(self, *args, **kwargs):
        """getOptionName(self) -> EString"""
        return _VISHNU.OptionValue_getOptionName(self, *args, **kwargs)

    def setOptionName(self, *args, **kwargs):
        """setOptionName(self, EString _optionName)"""
        return _VISHNU.OptionValue_setOptionName(self, *args, **kwargs)

    def getValue(self, *args, **kwargs):
        """getValue(self) -> EString"""
        return _VISHNU.OptionValue_getValue(self, *args, **kwargs)

    def setValue(self, *args, **kwargs):
        """setValue(self, EString _value)"""
        return _VISHNU.OptionValue_setValue(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(self, EInt _featureID, EBoolean _resolve) -> EJavaObject"""
        return _VISHNU.OptionValue_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(self, EInt _featureID, EJavaObject _newValue)"""
        return _VISHNU.OptionValue_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(self, EInt _featureID) -> EBoolean"""
        return _VISHNU.OptionValue_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(self, EInt _featureID)"""
        return _VISHNU.OptionValue_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(self) -> EClass_ptr"""
        return _VISHNU.OptionValue__eClass(self, *args, **kwargs)

OptionValue_swigregister = _VISHNU.OptionValue_swigregister
OptionValue_swigregister(OptionValue)

class ListOptOptions(EObject):
    """Proxy of C++ UMS_Data::ListOptOptions class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListOptOptions, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListOptOptions, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(self) -> ListOptOptions"""
        this = _VISHNU.new_ListOptOptions(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_ListOptOptions
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(self)"""
        return _VISHNU.ListOptOptions__initialize(self, *args, **kwargs)

    def isListAllDeftValue(self, *args, **kwargs):
        """isListAllDeftValue(self) -> EBoolean"""
        return _VISHNU.ListOptOptions_isListAllDeftValue(self, *args, **kwargs)

    def setListAllDeftValue(self, *args, **kwargs):
        """setListAllDeftValue(self, EBoolean _listAllDeftValue)"""
        return _VISHNU.ListOptOptions_setListAllDeftValue(self, *args, **kwargs)

    def getUserId(self, *args, **kwargs):
        """getUserId(self) -> EString"""
        return _VISHNU.ListOptOptions_getUserId(self, *args, **kwargs)

    def setUserId(self, *args, **kwargs):
        """setUserId(self, EString _userId)"""
        return _VISHNU.ListOptOptions_setUserId(self, *args, **kwargs)

    def getOptionName(self, *args, **kwargs):
        """getOptionName(self) -> EString"""
        return _VISHNU.ListOptOptions_getOptionName(self, *args, **kwargs)

    def setOptionName(self, *args, **kwargs):
        """setOptionName(self, EString _optionName)"""
        return _VISHNU.ListOptOptions_setOptionName(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(self, EInt _featureID, EBoolean _resolve) -> EJavaObject"""
        return _VISHNU.ListOptOptions_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(self, EInt _featureID, EJavaObject _newValue)"""
        return _VISHNU.ListOptOptions_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(self, EInt _featureID) -> EBoolean"""
        return _VISHNU.ListOptOptions_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(self, EInt _featureID)"""
        return _VISHNU.ListOptOptions_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(self) -> EClass_ptr"""
        return _VISHNU.ListOptOptions__eClass(self, *args, **kwargs)

ListOptOptions_swigregister = _VISHNU.ListOptOptions_swigregister
ListOptOptions_swigregister(ListOptOptions)

class AuthAccount(EObject):
    """Proxy of C++ UMS_Data::AuthAccount class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AuthAccount, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AuthAccount, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(self) -> AuthAccount"""
        this = _VISHNU.new_AuthAccount(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_AuthAccount
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(self)"""
        return _VISHNU.AuthAccount__initialize(self, *args, **kwargs)

    def getAuthSystemId(self, *args, **kwargs):
        """getAuthSystemId(self) -> EString"""
        return _VISHNU.AuthAccount_getAuthSystemId(self, *args, **kwargs)

    def setAuthSystemId(self, *args, **kwargs):
        """setAuthSystemId(self, EString _authSystemId)"""
        return _VISHNU.AuthAccount_setAuthSystemId(self, *args, **kwargs)

    def getUserId(self, *args, **kwargs):
        """getUserId(self) -> EString"""
        return _VISHNU.AuthAccount_getUserId(self, *args, **kwargs)

    def setUserId(self, *args, **kwargs):
        """setUserId(self, EString _userId)"""
        return _VISHNU.AuthAccount_setUserId(self, *args, **kwargs)

    def getAcLogin(self, *args, **kwargs):
        """getAcLogin(self) -> EString"""
        return _VISHNU.AuthAccount_getAcLogin(self, *args, **kwargs)

    def setAcLogin(self, *args, **kwargs):
        """setAcLogin(self, EString _acLogin)"""
        return _VISHNU.AuthAccount_setAcLogin(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(self, EInt _featureID, EBoolean _resolve) -> EJavaObject"""
        return _VISHNU.AuthAccount_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(self, EInt _featureID, EJavaObject _newValue)"""
        return _VISHNU.AuthAccount_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(self, EInt _featureID) -> EBoolean"""
        return _VISHNU.AuthAccount_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(self, EInt _featureID)"""
        return _VISHNU.AuthAccount_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(self) -> EClass_ptr"""
        return _VISHNU.AuthAccount__eClass(self, *args, **kwargs)

AuthAccount_swigregister = _VISHNU.AuthAccount_swigregister
AuthAccount_swigregister(AuthAccount)

class AuthSystem(EObject):
    """Proxy of C++ UMS_Data::AuthSystem class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AuthSystem, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AuthSystem, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(self) -> AuthSystem"""
        this = _VISHNU.new_AuthSystem(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_AuthSystem
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(self)"""
        return _VISHNU.AuthSystem__initialize(self, *args, **kwargs)

    def getAuthSystemId(self, *args, **kwargs):
        """getAuthSystemId(self) -> EString"""
        return _VISHNU.AuthSystem_getAuthSystemId(self, *args, **kwargs)

    def setAuthSystemId(self, *args, **kwargs):
        """setAuthSystemId(self, EString _authSystemId)"""
        return _VISHNU.AuthSystem_setAuthSystemId(self, *args, **kwargs)

    def getName(self, *args, **kwargs):
        """getName(self) -> EString"""
        return _VISHNU.AuthSystem_getName(self, *args, **kwargs)

    def setName(self, *args, **kwargs):
        """setName(self, EString _name)"""
        return _VISHNU.AuthSystem_setName(self, *args, **kwargs)

    def getURI(self, *args, **kwargs):
        """getURI(self) -> EString"""
        return _VISHNU.AuthSystem_getURI(self, *args, **kwargs)

    def setURI(self, *args, **kwargs):
        """setURI(self, EString _URI)"""
        return _VISHNU.AuthSystem_setURI(self, *args, **kwargs)

    def getAuthLogin(self, *args, **kwargs):
        """getAuthLogin(self) -> EString"""
        return _VISHNU.AuthSystem_getAuthLogin(self, *args, **kwargs)

    def setAuthLogin(self, *args, **kwargs):
        """setAuthLogin(self, EString _authLogin)"""
        return _VISHNU.AuthSystem_setAuthLogin(self, *args, **kwargs)

    def getAuthPassword(self, *args, **kwargs):
        """getAuthPassword(self) -> EString"""
        return _VISHNU.AuthSystem_getAuthPassword(self, *args, **kwargs)

    def setAuthPassword(self, *args, **kwargs):
        """setAuthPassword(self, EString _authPassword)"""
        return _VISHNU.AuthSystem_setAuthPassword(self, *args, **kwargs)

    def getUserPasswordEncryption(self, *args, **kwargs):
        """getUserPasswordEncryption(self) -> EncryptionMethod"""
        return _VISHNU.AuthSystem_getUserPasswordEncryption(self, *args, **kwargs)

    def setUserPasswordEncryption(self, *args, **kwargs):
        """setUserPasswordEncryption(self, EncryptionMethod _userPasswordEncryption)"""
        return _VISHNU.AuthSystem_setUserPasswordEncryption(self, *args, **kwargs)

    def getType(self, *args, **kwargs):
        """getType(self) -> AuthType"""
        return _VISHNU.AuthSystem_getType(self, *args, **kwargs)

    def setType(self, *args, **kwargs):
        """setType(self, AuthType _type)"""
        return _VISHNU.AuthSystem_setType(self, *args, **kwargs)

    def getStatus(self, *args, **kwargs):
        """getStatus(self) -> StatusType"""
        return _VISHNU.AuthSystem_getStatus(self, *args, **kwargs)

    def setStatus(self, *args, **kwargs):
        """setStatus(self, StatusType _status)"""
        return _VISHNU.AuthSystem_setStatus(self, *args, **kwargs)

    def getLdapBase(self, *args, **kwargs):
        """getLdapBase(self) -> EString"""
        return _VISHNU.AuthSystem_getLdapBase(self, *args, **kwargs)

    def setLdapBase(self, *args, **kwargs):
        """setLdapBase(self, EString _ldapBase)"""
        return _VISHNU.AuthSystem_setLdapBase(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(self, EInt _featureID, EBoolean _resolve) -> EJavaObject"""
        return _VISHNU.AuthSystem_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(self, EInt _featureID, EJavaObject _newValue)"""
        return _VISHNU.AuthSystem_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(self, EInt _featureID) -> EBoolean"""
        return _VISHNU.AuthSystem_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(self, EInt _featureID)"""
        return _VISHNU.AuthSystem_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(self) -> EClass_ptr"""
        return _VISHNU.AuthSystem__eClass(self, *args, **kwargs)

AuthSystem_swigregister = _VISHNU.AuthSystem_swigregister
AuthSystem_swigregister(AuthSystem)

class ListAuthSysOptions(EObject):
    """Proxy of C++ UMS_Data::ListAuthSysOptions class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListAuthSysOptions, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListAuthSysOptions, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(self) -> ListAuthSysOptions"""
        this = _VISHNU.new_ListAuthSysOptions(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_ListAuthSysOptions
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(self)"""
        return _VISHNU.ListAuthSysOptions__initialize(self, *args, **kwargs)

    def isListAllAuthSystems(self, *args, **kwargs):
        """isListAllAuthSystems(self) -> EBoolean"""
        return _VISHNU.ListAuthSysOptions_isListAllAuthSystems(self, *args, **kwargs)

    def setListAllAuthSystems(self, *args, **kwargs):
        """setListAllAuthSystems(self, EBoolean _listAllAuthSystems)"""
        return _VISHNU.ListAuthSysOptions_setListAllAuthSystems(self, *args, **kwargs)

    def isListFullInfo(self, *args, **kwargs):
        """isListFullInfo(self) -> EBoolean"""
        return _VISHNU.ListAuthSysOptions_isListFullInfo(self, *args, **kwargs)

    def setListFullInfo(self, *args, **kwargs):
        """setListFullInfo(self, EBoolean _listFullInfo)"""
        return _VISHNU.ListAuthSysOptions_setListFullInfo(self, *args, **kwargs)

    def getUserId(self, *args, **kwargs):
        """getUserId(self) -> EString"""
        return _VISHNU.ListAuthSysOptions_getUserId(self, *args, **kwargs)

    def setUserId(self, *args, **kwargs):
        """setUserId(self, EString _userId)"""
        return _VISHNU.ListAuthSysOptions_setUserId(self, *args, **kwargs)

    def getAuthSystemId(self, *args, **kwargs):
        """getAuthSystemId(self) -> EString"""
        return _VISHNU.ListAuthSysOptions_getAuthSystemId(self, *args, **kwargs)

    def setAuthSystemId(self, *args, **kwargs):
        """setAuthSystemId(self, EString _authSystemId)"""
        return _VISHNU.ListAuthSysOptions_setAuthSystemId(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(self, EInt _featureID, EBoolean _resolve) -> EJavaObject"""
        return _VISHNU.ListAuthSysOptions_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(self, EInt _featureID, EJavaObject _newValue)"""
        return _VISHNU.ListAuthSysOptions_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(self, EInt _featureID) -> EBoolean"""
        return _VISHNU.ListAuthSysOptions_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(self, EInt _featureID)"""
        return _VISHNU.ListAuthSysOptions_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(self) -> EClass_ptr"""
        return _VISHNU.ListAuthSysOptions__eClass(self, *args, **kwargs)

ListAuthSysOptions_swigregister = _VISHNU.ListAuthSysOptions_swigregister
ListAuthSysOptions_swigregister(ListAuthSysOptions)

class ListAuthAccOptions(EObject):
    """Proxy of C++ UMS_Data::ListAuthAccOptions class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListAuthAccOptions, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListAuthAccOptions, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(self) -> ListAuthAccOptions"""
        this = _VISHNU.new_ListAuthAccOptions(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_ListAuthAccOptions
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(self)"""
        return _VISHNU.ListAuthAccOptions__initialize(self, *args, **kwargs)

    def isListAll(self, *args, **kwargs):
        """isListAll(self) -> EBoolean"""
        return _VISHNU.ListAuthAccOptions_isListAll(self, *args, **kwargs)

    def setListAll(self, *args, **kwargs):
        """setListAll(self, EBoolean _listAll)"""
        return _VISHNU.ListAuthAccOptions_setListAll(self, *args, **kwargs)

    def getUserId(self, *args, **kwargs):
        """getUserId(self) -> EString"""
        return _VISHNU.ListAuthAccOptions_getUserId(self, *args, **kwargs)

    def setUserId(self, *args, **kwargs):
        """setUserId(self, EString _userId)"""
        return _VISHNU.ListAuthAccOptions_setUserId(self, *args, **kwargs)

    def getAuthSystemId(self, *args, **kwargs):
        """getAuthSystemId(self) -> EString"""
        return _VISHNU.ListAuthAccOptions_getAuthSystemId(self, *args, **kwargs)

    def setAuthSystemId(self, *args, **kwargs):
        """setAuthSystemId(self, EString _authSystemId)"""
        return _VISHNU.ListAuthAccOptions_setAuthSystemId(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(self, EInt _featureID, EBoolean _resolve) -> EJavaObject"""
        return _VISHNU.ListAuthAccOptions_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(self, EInt _featureID, EJavaObject _newValue)"""
        return _VISHNU.ListAuthAccOptions_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(self, EInt _featureID) -> EBoolean"""
        return _VISHNU.ListAuthAccOptions_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(self, EInt _featureID)"""
        return _VISHNU.ListAuthAccOptions_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(self) -> EClass_ptr"""
        return _VISHNU.ListAuthAccOptions__eClass(self, *args, **kwargs)

ListAuthAccOptions_swigregister = _VISHNU.ListAuthAccOptions_swigregister
ListAuthAccOptions_swigregister(ListAuthAccOptions)

class Job(EObject):
    """Proxy of C++ TMS_Data::Job class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Job, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Job, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(self) -> Job"""
        this = _VISHNU.new_Job(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_Job
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(self)"""
        return _VISHNU.Job__initialize(self, *args, **kwargs)

    def getSessionId(self, *args, **kwargs):
        """getSessionId(self) -> EString"""
        return _VISHNU.Job_getSessionId(self, *args, **kwargs)

    def setSessionId(self, *args, **kwargs):
        """setSessionId(self, EString _sessionId)"""
        return _VISHNU.Job_setSessionId(self, *args, **kwargs)

    def getSubmitMachineId(self, *args, **kwargs):
        """getSubmitMachineId(self) -> EString"""
        return _VISHNU.Job_getSubmitMachineId(self, *args, **kwargs)

    def setSubmitMachineId(self, *args, **kwargs):
        """setSubmitMachineId(self, EString _submitMachineId)"""
        return _VISHNU.Job_setSubmitMachineId(self, *args, **kwargs)

    def getSubmitMachineName(self, *args, **kwargs):
        """getSubmitMachineName(self) -> EString"""
        return _VISHNU.Job_getSubmitMachineName(self, *args, **kwargs)

    def setSubmitMachineName(self, *args, **kwargs):
        """setSubmitMachineName(self, EString _submitMachineName)"""
        return _VISHNU.Job_setSubmitMachineName(self, *args, **kwargs)

    def getJobId(self, *args, **kwargs):
        """getJobId(self) -> EString"""
        return _VISHNU.Job_getJobId(self, *args, **kwargs)

    def setJobId(self, *args, **kwargs):
        """setJobId(self, EString _jobId)"""
        return _VISHNU.Job_setJobId(self, *args, **kwargs)

    def getJobName(self, *args, **kwargs):
        """getJobName(self) -> EString"""
        return _VISHNU.Job_getJobName(self, *args, **kwargs)

    def setJobName(self, *args, **kwargs):
        """setJobName(self, EString _jobName)"""
        return _VISHNU.Job_setJobName(self, *args, **kwargs)

    def getJobPath(self, *args, **kwargs):
        """getJobPath(self) -> EString"""
        return _VISHNU.Job_getJobPath(self, *args, **kwargs)

    def setJobPath(self, *args, **kwargs):
        """setJobPath(self, EString _jobPath)"""
        return _VISHNU.Job_setJobPath(self, *args, **kwargs)

    def getOutputPath(self, *args, **kwargs):
        """getOutputPath(self) -> EString"""
        return _VISHNU.Job_getOutputPath(self, *args, **kwargs)

    def setOutputPath(self, *args, **kwargs):
        """setOutputPath(self, EString _outputPath)"""
        return _VISHNU.Job_setOutputPath(self, *args, **kwargs)

    def getErrorPath(self, *args, **kwargs):
        """getErrorPath(self) -> EString"""
        return _VISHNU.Job_getErrorPath(self, *args, **kwargs)

    def setErrorPath(self, *args, **kwargs):
        """setErrorPath(self, EString _errorPath)"""
        return _VISHNU.Job_setErrorPath(self, *args, **kwargs)

    def getJobPrio(self, *args, **kwargs):
        """getJobPrio(self) -> JobPriority"""
        return _VISHNU.Job_getJobPrio(self, *args, **kwargs)

    def setJobPrio(self, *args, **kwargs):
        """setJobPrio(self, JobPriority _jobPrio)"""
        return _VISHNU.Job_setJobPrio(self, *args, **kwargs)

    def getNbCpus(self, *args, **kwargs):
        """getNbCpus(self) -> EInt"""
        return _VISHNU.Job_getNbCpus(self, *args, **kwargs)

    def setNbCpus(self, *args, **kwargs):
        """setNbCpus(self, EInt _nbCpus)"""
        return _VISHNU.Job_setNbCpus(self, *args, **kwargs)

    def getJobWorkingDir(self, *args, **kwargs):
        """getJobWorkingDir(self) -> EString"""
        return _VISHNU.Job_getJobWorkingDir(self, *args, **kwargs)

    def setJobWorkingDir(self, *args, **kwargs):
        """setJobWorkingDir(self, EString _jobWorkingDir)"""
        return _VISHNU.Job_setJobWorkingDir(self, *args, **kwargs)

    def getStatus(self, *args, **kwargs):
        """getStatus(self) -> JobStatus"""
        return _VISHNU.Job_getStatus(self, *args, **kwargs)

    def setStatus(self, *args, **kwargs):
        """setStatus(self, JobStatus _status)"""
        return _VISHNU.Job_setStatus(self, *args, **kwargs)

    def getSubmitDate(self, *args, **kwargs):
        """getSubmitDate(self) -> ELong"""
        return _VISHNU.Job_getSubmitDate(self, *args, **kwargs)

    def setSubmitDate(self, *args, **kwargs):
        """setSubmitDate(self, ELong _submitDate)"""
        return _VISHNU.Job_setSubmitDate(self, *args, **kwargs)

    def getEndDate(self, *args, **kwargs):
        """getEndDate(self) -> ELong"""
        return _VISHNU.Job_getEndDate(self, *args, **kwargs)

    def setEndDate(self, *args, **kwargs):
        """setEndDate(self, ELong _endDate)"""
        return _VISHNU.Job_setEndDate(self, *args, **kwargs)

    def getOwner(self, *args, **kwargs):
        """getOwner(self) -> EString"""
        return _VISHNU.Job_getOwner(self, *args, **kwargs)

    def setOwner(self, *args, **kwargs):
        """setOwner(self, EString _owner)"""
        return _VISHNU.Job_setOwner(self, *args, **kwargs)

    def getJobQueue(self, *args, **kwargs):
        """getJobQueue(self) -> EString"""
        return _VISHNU.Job_getJobQueue(self, *args, **kwargs)

    def setJobQueue(self, *args, **kwargs):
        """setJobQueue(self, EString _jobQueue)"""
        return _VISHNU.Job_setJobQueue(self, *args, **kwargs)

    def getWallClockLimit(self, *args, **kwargs):
        """getWallClockLimit(self) -> ELong"""
        return _VISHNU.Job_getWallClockLimit(self, *args, **kwargs)

    def setWallClockLimit(self, *args, **kwargs):
        """setWallClockLimit(self, ELong _wallClockLimit)"""
        return _VISHNU.Job_setWallClockLimit(self, *args, **kwargs)

    def getGroupName(self, *args, **kwargs):
        """getGroupName(self) -> EString"""
        return _VISHNU.Job_getGroupName(self, *args, **kwargs)

    def setGroupName(self, *args, **kwargs):
        """setGroupName(self, EString _groupName)"""
        return _VISHNU.Job_setGroupName(self, *args, **kwargs)

    def getJobDescription(self, *args, **kwargs):
        """getJobDescription(self) -> EString"""
        return _VISHNU.Job_getJobDescription(self, *args, **kwargs)

    def setJobDescription(self, *args, **kwargs):
        """setJobDescription(self, EString _jobDescription)"""
        return _VISHNU.Job_setJobDescription(self, *args, **kwargs)

    def getMemLimit(self, *args, **kwargs):
        """getMemLimit(self) -> EInt"""
        return _VISHNU.Job_getMemLimit(self, *args, **kwargs)

    def setMemLimit(self, *args, **kwargs):
        """setMemLimit(self, EInt _memLimit)"""
        return _VISHNU.Job_setMemLimit(self, *args, **kwargs)

    def getNbNodes(self, *args, **kwargs):
        """getNbNodes(self) -> EInt"""
        return _VISHNU.Job_getNbNodes(self, *args, **kwargs)

    def setNbNodes(self, *args, **kwargs):
        """setNbNodes(self, EInt _nbNodes)"""
        return _VISHNU.Job_setNbNodes(self, *args, **kwargs)

    def getNbNodesAndCpuPerNode(self, *args, **kwargs):
        """getNbNodesAndCpuPerNode(self) -> EString"""
        return _VISHNU.Job_getNbNodesAndCpuPerNode(self, *args, **kwargs)

    def setNbNodesAndCpuPerNode(self, *args, **kwargs):
        """setNbNodesAndCpuPerNode(self, EString _nbNodesAndCpuPerNode)"""
        return _VISHNU.Job_setNbNodesAndCpuPerNode(self, *args, **kwargs)

    def getBatchJobId(self, *args, **kwargs):
        """getBatchJobId(self) -> EString"""
        return _VISHNU.Job_getBatchJobId(self, *args, **kwargs)

    def setBatchJobId(self, *args, **kwargs):
        """setBatchJobId(self, EString _batchJobId)"""
        return _VISHNU.Job_setBatchJobId(self, *args, **kwargs)

    def getOutputDir(self, *args, **kwargs):
        """getOutputDir(self) -> EString"""
        return _VISHNU.Job_getOutputDir(self, *args, **kwargs)

    def setOutputDir(self, *args, **kwargs):
        """setOutputDir(self, EString _outputDir)"""
        return _VISHNU.Job_setOutputDir(self, *args, **kwargs)

    def getWorkId(self, *args, **kwargs):
        """getWorkId(self) -> ELong"""
        return _VISHNU.Job_getWorkId(self, *args, **kwargs)

    def setWorkId(self, *args, **kwargs):
        """setWorkId(self, ELong _workId)"""
        return _VISHNU.Job_setWorkId(self, *args, **kwargs)

    def getUserId(self, *args, **kwargs):
        """getUserId(self) -> EString"""
        return _VISHNU.Job_getUserId(self, *args, **kwargs)

    def setUserId(self, *args, **kwargs):
        """setUserId(self, EString _userId)"""
        return _VISHNU.Job_setUserId(self, *args, **kwargs)

    def getVmId(self, *args, **kwargs):
        """getVmId(self) -> EString"""
        return _VISHNU.Job_getVmId(self, *args, **kwargs)

    def setVmId(self, *args, **kwargs):
        """setVmId(self, EString _vmId)"""
        return _VISHNU.Job_setVmId(self, *args, **kwargs)

    def getVmIp(self, *args, **kwargs):
        """getVmIp(self) -> EString"""
        return _VISHNU.Job_getVmIp(self, *args, **kwargs)

    def setVmIp(self, *args, **kwargs):
        """setVmIp(self, EString _vmIp)"""
        return _VISHNU.Job_setVmIp(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(self, EInt _featureID, EBoolean _resolve) -> EJavaObject"""
        return _VISHNU.Job_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(self, EInt _featureID, EJavaObject _newValue)"""
        return _VISHNU.Job_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(self, EInt _featureID) -> EBoolean"""
        return _VISHNU.Job_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(self, EInt _featureID)"""
        return _VISHNU.Job_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(self) -> EClass_ptr"""
        return _VISHNU.Job__eClass(self, *args, **kwargs)

Job_swigregister = _VISHNU.Job_swigregister
Job_swigregister(Job)

class JobResult(EObject):
    """Proxy of C++ TMS_Data::JobResult class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, JobResult, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, JobResult, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(self) -> JobResult"""
        this = _VISHNU.new_JobResult(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_JobResult
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(self)"""
        return _VISHNU.JobResult__initialize(self, *args, **kwargs)

    def getJobId(self, *args, **kwargs):
        """getJobId(self) -> EString"""
        return _VISHNU.JobResult_getJobId(self, *args, **kwargs)

    def setJobId(self, *args, **kwargs):
        """setJobId(self, EString _jobId)"""
        return _VISHNU.JobResult_setJobId(self, *args, **kwargs)

    def getOutputPath(self, *args, **kwargs):
        """getOutputPath(self) -> EString"""
        return _VISHNU.JobResult_getOutputPath(self, *args, **kwargs)

    def setOutputPath(self, *args, **kwargs):
        """setOutputPath(self, EString _outputPath)"""
        return _VISHNU.JobResult_setOutputPath(self, *args, **kwargs)

    def getErrorPath(self, *args, **kwargs):
        """getErrorPath(self) -> EString"""
        return _VISHNU.JobResult_getErrorPath(self, *args, **kwargs)

    def setErrorPath(self, *args, **kwargs):
        """setErrorPath(self, EString _errorPath)"""
        return _VISHNU.JobResult_setErrorPath(self, *args, **kwargs)

    def getOutputDir(self, *args, **kwargs):
        """getOutputDir(self) -> EString"""
        return _VISHNU.JobResult_getOutputDir(self, *args, **kwargs)

    def setOutputDir(self, *args, **kwargs):
        """setOutputDir(self, EString _outputDir)"""
        return _VISHNU.JobResult_setOutputDir(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(self, EInt _featureID, EBoolean _resolve) -> EJavaObject"""
        return _VISHNU.JobResult_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(self, EInt _featureID, EJavaObject _newValue)"""
        return _VISHNU.JobResult_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(self, EInt _featureID) -> EBoolean"""
        return _VISHNU.JobResult_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(self, EInt _featureID)"""
        return _VISHNU.JobResult_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(self) -> EClass_ptr"""
        return _VISHNU.JobResult__eClass(self, *args, **kwargs)

JobResult_swigregister = _VISHNU.JobResult_swigregister
JobResult_swigregister(JobResult)

class ListJobsOptions(EObject):
    """Proxy of C++ TMS_Data::ListJobsOptions class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListJobsOptions, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListJobsOptions, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(self) -> ListJobsOptions"""
        this = _VISHNU.new_ListJobsOptions(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_ListJobsOptions
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(self)"""
        return _VISHNU.ListJobsOptions__initialize(self, *args, **kwargs)

    def getJobId(self, *args, **kwargs):
        """getJobId(self) -> EString"""
        return _VISHNU.ListJobsOptions_getJobId(self, *args, **kwargs)

    def setJobId(self, *args, **kwargs):
        """setJobId(self, EString _jobId)"""
        return _VISHNU.ListJobsOptions_setJobId(self, *args, **kwargs)

    def getNbCpu(self, *args, **kwargs):
        """getNbCpu(self) -> EInt"""
        return _VISHNU.ListJobsOptions_getNbCpu(self, *args, **kwargs)

    def setNbCpu(self, *args, **kwargs):
        """setNbCpu(self, EInt _nbCpu)"""
        return _VISHNU.ListJobsOptions_setNbCpu(self, *args, **kwargs)

    def getFromSubmitDate(self, *args, **kwargs):
        """getFromSubmitDate(self) -> ELong"""
        return _VISHNU.ListJobsOptions_getFromSubmitDate(self, *args, **kwargs)

    def setFromSubmitDate(self, *args, **kwargs):
        """setFromSubmitDate(self, ELong _fromSubmitDate)"""
        return _VISHNU.ListJobsOptions_setFromSubmitDate(self, *args, **kwargs)

    def getToSubmitDate(self, *args, **kwargs):
        """getToSubmitDate(self) -> ELong"""
        return _VISHNU.ListJobsOptions_getToSubmitDate(self, *args, **kwargs)

    def setToSubmitDate(self, *args, **kwargs):
        """setToSubmitDate(self, ELong _toSubmitDate)"""
        return _VISHNU.ListJobsOptions_setToSubmitDate(self, *args, **kwargs)

    def getOwner(self, *args, **kwargs):
        """getOwner(self) -> EString"""
        return _VISHNU.ListJobsOptions_getOwner(self, *args, **kwargs)

    def setOwner(self, *args, **kwargs):
        """setOwner(self, EString _owner)"""
        return _VISHNU.ListJobsOptions_setOwner(self, *args, **kwargs)

    def getStatus(self, *args, **kwargs):
        """getStatus(self) -> JobStatus"""
        return _VISHNU.ListJobsOptions_getStatus(self, *args, **kwargs)

    def setStatus(self, *args, **kwargs):
        """setStatus(self, JobStatus _status)"""
        return _VISHNU.ListJobsOptions_setStatus(self, *args, **kwargs)

    def getPriority(self, *args, **kwargs):
        """getPriority(self) -> JobPriority"""
        return _VISHNU.ListJobsOptions_getPriority(self, *args, **kwargs)

    def setPriority(self, *args, **kwargs):
        """setPriority(self, JobPriority _priority)"""
        return _VISHNU.ListJobsOptions_setPriority(self, *args, **kwargs)

    def getQueue(self, *args, **kwargs):
        """getQueue(self) -> EString"""
        return _VISHNU.ListJobsOptions_getQueue(self, *args, **kwargs)

    def setQueue(self, *args, **kwargs):
        """setQueue(self, EString _queue)"""
        return _VISHNU.ListJobsOptions_setQueue(self, *args, **kwargs)

    def getMultipleStatus(self, *args, **kwargs):
        """getMultipleStatus(self) -> EString"""
        return _VISHNU.ListJobsOptions_getMultipleStatus(self, *args, **kwargs)

    def setMultipleStatus(self, *args, **kwargs):
        """setMultipleStatus(self, EString _multipleStatus)"""
        return _VISHNU.ListJobsOptions_setMultipleStatus(self, *args, **kwargs)

    def isBatchJob(self, *args, **kwargs):
        """isBatchJob(self) -> EBoolean"""
        return _VISHNU.ListJobsOptions_isBatchJob(self, *args, **kwargs)

    def setBatchJob(self, *args, **kwargs):
        """setBatchJob(self, EBoolean _batchJob)"""
        return _VISHNU.ListJobsOptions_setBatchJob(self, *args, **kwargs)

    def getWorkId(self, *args, **kwargs):
        """getWorkId(self) -> ELong"""
        return _VISHNU.ListJobsOptions_getWorkId(self, *args, **kwargs)

    def setWorkId(self, *args, **kwargs):
        """setWorkId(self, ELong _workId)"""
        return _VISHNU.ListJobsOptions_setWorkId(self, *args, **kwargs)

    def isListAll(self, *args, **kwargs):
        """isListAll(self) -> EBoolean"""
        return _VISHNU.ListJobsOptions_isListAll(self, *args, **kwargs)

    def setListAll(self, *args, **kwargs):
        """setListAll(self, EBoolean _listAll)"""
        return _VISHNU.ListJobsOptions_setListAll(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(self, EInt _featureID, EBoolean _resolve) -> EJavaObject"""
        return _VISHNU.ListJobsOptions_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(self, EInt _featureID, EJavaObject _newValue)"""
        return _VISHNU.ListJobsOptions_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(self, EInt _featureID) -> EBoolean"""
        return _VISHNU.ListJobsOptions_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(self, EInt _featureID)"""
        return _VISHNU.ListJobsOptions_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(self) -> EClass_ptr"""
        return _VISHNU.ListJobsOptions__eClass(self, *args, **kwargs)

ListJobsOptions_swigregister = _VISHNU.ListJobsOptions_swigregister
ListJobsOptions_swigregister(ListJobsOptions)

class ProgressOptions(EObject):
    """Proxy of C++ TMS_Data::ProgressOptions class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProgressOptions, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ProgressOptions, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(self) -> ProgressOptions"""
        this = _VISHNU.new_ProgressOptions(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_ProgressOptions
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(self)"""
        return _VISHNU.ProgressOptions__initialize(self, *args, **kwargs)

    def getJobId(self, *args, **kwargs):
        """getJobId(self) -> EString"""
        return _VISHNU.ProgressOptions_getJobId(self, *args, **kwargs)

    def setJobId(self, *args, **kwargs):
        """setJobId(self, EString _jobId)"""
        return _VISHNU.ProgressOptions_setJobId(self, *args, **kwargs)

    def getJobOwner(self, *args, **kwargs):
        """getJobOwner(self) -> EString"""
        return _VISHNU.ProgressOptions_getJobOwner(self, *args, **kwargs)

    def setJobOwner(self, *args, **kwargs):
        """setJobOwner(self, EString _jobOwner)"""
        return _VISHNU.ProgressOptions_setJobOwner(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(self, EInt _featureID, EBoolean _resolve) -> EJavaObject"""
        return _VISHNU.ProgressOptions_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(self, EInt _featureID, EJavaObject _newValue)"""
        return _VISHNU.ProgressOptions_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(self, EInt _featureID) -> EBoolean"""
        return _VISHNU.ProgressOptions_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(self, EInt _featureID)"""
        return _VISHNU.ProgressOptions_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(self) -> EClass_ptr"""
        return _VISHNU.ProgressOptions__eClass(self, *args, **kwargs)

ProgressOptions_swigregister = _VISHNU.ProgressOptions_swigregister
ProgressOptions_swigregister(ProgressOptions)

class Progression(EObject):
    """Proxy of C++ TMS_Data::Progression class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Progression, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Progression, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(self) -> Progression"""
        this = _VISHNU.new_Progression(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_Progression
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(self)"""
        return _VISHNU.Progression__initialize(self, *args, **kwargs)

    def getJobId(self, *args, **kwargs):
        """getJobId(self) -> EString"""
        return _VISHNU.Progression_getJobId(self, *args, **kwargs)

    def setJobId(self, *args, **kwargs):
        """setJobId(self, EString _jobId)"""
        return _VISHNU.Progression_setJobId(self, *args, **kwargs)

    def getJobName(self, *args, **kwargs):
        """getJobName(self) -> EString"""
        return _VISHNU.Progression_getJobName(self, *args, **kwargs)

    def setJobName(self, *args, **kwargs):
        """setJobName(self, EString _jobName)"""
        return _VISHNU.Progression_setJobName(self, *args, **kwargs)

    def getWallTime(self, *args, **kwargs):
        """getWallTime(self) -> EInt"""
        return _VISHNU.Progression_getWallTime(self, *args, **kwargs)

    def setWallTime(self, *args, **kwargs):
        """setWallTime(self, EInt _wallTime)"""
        return _VISHNU.Progression_setWallTime(self, *args, **kwargs)

    def getStartTime(self, *args, **kwargs):
        """getStartTime(self) -> ELong"""
        return _VISHNU.Progression_getStartTime(self, *args, **kwargs)

    def setStartTime(self, *args, **kwargs):
        """setStartTime(self, ELong _startTime)"""
        return _VISHNU.Progression_setStartTime(self, *args, **kwargs)

    def getEndTime(self, *args, **kwargs):
        """getEndTime(self) -> ELong"""
        return _VISHNU.Progression_getEndTime(self, *args, **kwargs)

    def setEndTime(self, *args, **kwargs):
        """setEndTime(self, ELong _endTime)"""
        return _VISHNU.Progression_setEndTime(self, *args, **kwargs)

    def getPercent(self, *args, **kwargs):
        """getPercent(self) -> EInt"""
        return _VISHNU.Progression_getPercent(self, *args, **kwargs)

    def setPercent(self, *args, **kwargs):
        """setPercent(self, EInt _percent)"""
        return _VISHNU.Progression_setPercent(self, *args, **kwargs)

    def getStatus(self, *args, **kwargs):
        """getStatus(self) -> JobStatus"""
        return _VISHNU.Progression_getStatus(self, *args, **kwargs)

    def setStatus(self, *args, **kwargs):
        """setStatus(self, JobStatus _status)"""
        return _VISHNU.Progression_setStatus(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(self, EInt _featureID, EBoolean _resolve) -> EJavaObject"""
        return _VISHNU.Progression_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(self, EInt _featureID, EJavaObject _newValue)"""
        return _VISHNU.Progression_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(self, EInt _featureID) -> EBoolean"""
        return _VISHNU.Progression_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(self, EInt _featureID)"""
        return _VISHNU.Progression_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(self) -> EClass_ptr"""
        return _VISHNU.Progression__eClass(self, *args, **kwargs)

Progression_swigregister = _VISHNU.Progression_swigregister
Progression_swigregister(Progression)

class Queue(EObject):
    """Proxy of C++ TMS_Data::Queue class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Queue, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Queue, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(self) -> Queue"""
        this = _VISHNU.new_Queue(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_Queue
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(self)"""
        return _VISHNU.Queue__initialize(self, *args, **kwargs)

    def getName(self, *args, **kwargs):
        """getName(self) -> EString"""
        return _VISHNU.Queue_getName(self, *args, **kwargs)

    def setName(self, *args, **kwargs):
        """setName(self, EString _name)"""
        return _VISHNU.Queue_setName(self, *args, **kwargs)

    def getMaxJobCpu(self, *args, **kwargs):
        """getMaxJobCpu(self) -> EInt"""
        return _VISHNU.Queue_getMaxJobCpu(self, *args, **kwargs)

    def setMaxJobCpu(self, *args, **kwargs):
        """setMaxJobCpu(self, EInt _maxJobCpu)"""
        return _VISHNU.Queue_setMaxJobCpu(self, *args, **kwargs)

    def getMaxProcCpu(self, *args, **kwargs):
        """getMaxProcCpu(self) -> EInt"""
        return _VISHNU.Queue_getMaxProcCpu(self, *args, **kwargs)

    def setMaxProcCpu(self, *args, **kwargs):
        """setMaxProcCpu(self, EInt _maxProcCpu)"""
        return _VISHNU.Queue_setMaxProcCpu(self, *args, **kwargs)

    def getMemory(self, *args, **kwargs):
        """getMemory(self) -> EInt"""
        return _VISHNU.Queue_getMemory(self, *args, **kwargs)

    def setMemory(self, *args, **kwargs):
        """setMemory(self, EInt _memory)"""
        return _VISHNU.Queue_setMemory(self, *args, **kwargs)

    def getWallTime(self, *args, **kwargs):
        """getWallTime(self) -> ELong"""
        return _VISHNU.Queue_getWallTime(self, *args, **kwargs)

    def setWallTime(self, *args, **kwargs):
        """setWallTime(self, ELong _wallTime)"""
        return _VISHNU.Queue_setWallTime(self, *args, **kwargs)

    def getNode(self, *args, **kwargs):
        """getNode(self) -> EInt"""
        return _VISHNU.Queue_getNode(self, *args, **kwargs)

    def setNode(self, *args, **kwargs):
        """setNode(self, EInt _node)"""
        return _VISHNU.Queue_setNode(self, *args, **kwargs)

    def getNbRunningJobs(self, *args, **kwargs):
        """getNbRunningJobs(self) -> EInt"""
        return _VISHNU.Queue_getNbRunningJobs(self, *args, **kwargs)

    def setNbRunningJobs(self, *args, **kwargs):
        """setNbRunningJobs(self, EInt _nbRunningJobs)"""
        return _VISHNU.Queue_setNbRunningJobs(self, *args, **kwargs)

    def getNbJobsInQueue(self, *args, **kwargs):
        """getNbJobsInQueue(self) -> EInt"""
        return _VISHNU.Queue_getNbJobsInQueue(self, *args, **kwargs)

    def setNbJobsInQueue(self, *args, **kwargs):
        """setNbJobsInQueue(self, EInt _nbJobsInQueue)"""
        return _VISHNU.Queue_setNbJobsInQueue(self, *args, **kwargs)

    def getState(self, *args, **kwargs):
        """getState(self) -> QueueStatus"""
        return _VISHNU.Queue_getState(self, *args, **kwargs)

    def setState(self, *args, **kwargs):
        """setState(self, QueueStatus _state)"""
        return _VISHNU.Queue_setState(self, *args, **kwargs)

    def getPriority(self, *args, **kwargs):
        """getPriority(self) -> QueuePriority"""
        return _VISHNU.Queue_getPriority(self, *args, **kwargs)

    def setPriority(self, *args, **kwargs):
        """setPriority(self, QueuePriority _priority)"""
        return _VISHNU.Queue_setPriority(self, *args, **kwargs)

    def getDescription(self, *args, **kwargs):
        """getDescription(self) -> EString"""
        return _VISHNU.Queue_getDescription(self, *args, **kwargs)

    def setDescription(self, *args, **kwargs):
        """setDescription(self, EString _description)"""
        return _VISHNU.Queue_setDescription(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(self, EInt _featureID, EBoolean _resolve) -> EJavaObject"""
        return _VISHNU.Queue_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(self, EInt _featureID, EJavaObject _newValue)"""
        return _VISHNU.Queue_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(self, EInt _featureID) -> EBoolean"""
        return _VISHNU.Queue_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(self, EInt _featureID)"""
        return _VISHNU.Queue_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(self) -> EClass_ptr"""
        return _VISHNU.Queue__eClass(self, *args, **kwargs)

Queue_swigregister = _VISHNU.Queue_swigregister
Queue_swigregister(Queue)

class SubmitOptions(EObject):
    """Proxy of C++ TMS_Data::SubmitOptions class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SubmitOptions, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SubmitOptions, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(self) -> SubmitOptions"""
        this = _VISHNU.new_SubmitOptions(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_SubmitOptions
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(self)"""
        return _VISHNU.SubmitOptions__initialize(self, *args, **kwargs)

    def getName(self, *args, **kwargs):
        """getName(self) -> EString"""
        return _VISHNU.SubmitOptions_getName(self, *args, **kwargs)

    def setName(self, *args, **kwargs):
        """setName(self, EString _name)"""
        return _VISHNU.SubmitOptions_setName(self, *args, **kwargs)

    def getQueue(self, *args, **kwargs):
        """getQueue(self) -> EString"""
        return _VISHNU.SubmitOptions_getQueue(self, *args, **kwargs)

    def setQueue(self, *args, **kwargs):
        """setQueue(self, EString _queue)"""
        return _VISHNU.SubmitOptions_setQueue(self, *args, **kwargs)

    def getWallTime(self, *args, **kwargs):
        """getWallTime(self) -> EInt"""
        return _VISHNU.SubmitOptions_getWallTime(self, *args, **kwargs)

    def setWallTime(self, *args, **kwargs):
        """setWallTime(self, EInt _wallTime)"""
        return _VISHNU.SubmitOptions_setWallTime(self, *args, **kwargs)

    def getMemory(self, *args, **kwargs):
        """getMemory(self) -> EInt"""
        return _VISHNU.SubmitOptions_getMemory(self, *args, **kwargs)

    def setMemory(self, *args, **kwargs):
        """setMemory(self, EInt _memory)"""
        return _VISHNU.SubmitOptions_setMemory(self, *args, **kwargs)

    def getNbCpu(self, *args, **kwargs):
        """getNbCpu(self) -> EInt"""
        return _VISHNU.SubmitOptions_getNbCpu(self, *args, **kwargs)

    def setNbCpu(self, *args, **kwargs):
        """setNbCpu(self, EInt _nbCpu)"""
        return _VISHNU.SubmitOptions_setNbCpu(self, *args, **kwargs)

    def getNbNodesAndCpuPerNode(self, *args, **kwargs):
        """getNbNodesAndCpuPerNode(self) -> EString"""
        return _VISHNU.SubmitOptions_getNbNodesAndCpuPerNode(self, *args, **kwargs)

    def setNbNodesAndCpuPerNode(self, *args, **kwargs):
        """setNbNodesAndCpuPerNode(self, EString _nbNodesAndCpuPerNode)"""
        return _VISHNU.SubmitOptions_setNbNodesAndCpuPerNode(self, *args, **kwargs)

    def getOutputPath(self, *args, **kwargs):
        """getOutputPath(self) -> EString"""
        return _VISHNU.SubmitOptions_getOutputPath(self, *args, **kwargs)

    def setOutputPath(self, *args, **kwargs):
        """setOutputPath(self, EString _outputPath)"""
        return _VISHNU.SubmitOptions_setOutputPath(self, *args, **kwargs)

    def getErrorPath(self, *args, **kwargs):
        """getErrorPath(self) -> EString"""
        return _VISHNU.SubmitOptions_getErrorPath(self, *args, **kwargs)

    def setErrorPath(self, *args, **kwargs):
        """setErrorPath(self, EString _errorPath)"""
        return _VISHNU.SubmitOptions_setErrorPath(self, *args, **kwargs)

    def getMailNotification(self, *args, **kwargs):
        """getMailNotification(self) -> EString"""
        return _VISHNU.SubmitOptions_getMailNotification(self, *args, **kwargs)

    def setMailNotification(self, *args, **kwargs):
        """setMailNotification(self, EString _mailNotification)"""
        return _VISHNU.SubmitOptions_setMailNotification(self, *args, **kwargs)

    def getMailNotifyUser(self, *args, **kwargs):
        """getMailNotifyUser(self) -> EString"""
        return _VISHNU.SubmitOptions_getMailNotifyUser(self, *args, **kwargs)

    def setMailNotifyUser(self, *args, **kwargs):
        """setMailNotifyUser(self, EString _mailNotifyUser)"""
        return _VISHNU.SubmitOptions_setMailNotifyUser(self, *args, **kwargs)

    def getGroup(self, *args, **kwargs):
        """getGroup(self) -> EString"""
        return _VISHNU.SubmitOptions_getGroup(self, *args, **kwargs)

    def setGroup(self, *args, **kwargs):
        """setGroup(self, EString _group)"""
        return _VISHNU.SubmitOptions_setGroup(self, *args, **kwargs)

    def getWorkingDir(self, *args, **kwargs):
        """getWorkingDir(self) -> EString"""
        return _VISHNU.SubmitOptions_getWorkingDir(self, *args, **kwargs)

    def setWorkingDir(self, *args, **kwargs):
        """setWorkingDir(self, EString _workingDir)"""
        return _VISHNU.SubmitOptions_setWorkingDir(self, *args, **kwargs)

    def getCpuTime(self, *args, **kwargs):
        """getCpuTime(self) -> EString"""
        return _VISHNU.SubmitOptions_getCpuTime(self, *args, **kwargs)

    def setCpuTime(self, *args, **kwargs):
        """setCpuTime(self, EString _cpuTime)"""
        return _VISHNU.SubmitOptions_setCpuTime(self, *args, **kwargs)

    def isSelectQueueAutom(self, *args, **kwargs):
        """isSelectQueueAutom(self) -> EBoolean"""
        return _VISHNU.SubmitOptions_isSelectQueueAutom(self, *args, **kwargs)

    def setSelectQueueAutom(self, *args, **kwargs):
        """setSelectQueueAutom(self, EBoolean _selectQueueAutom)"""
        return _VISHNU.SubmitOptions_setSelectQueueAutom(self, *args, **kwargs)

    def getFileParams(self, *args, **kwargs):
        """getFileParams(self) -> EString"""
        return _VISHNU.SubmitOptions_getFileParams(self, *args, **kwargs)

    def setFileParams(self, *args, **kwargs):
        """setFileParams(self, EString _fileParams)"""
        return _VISHNU.SubmitOptions_setFileParams(self, *args, **kwargs)

    def getTextParams(self, *args, **kwargs):
        """getTextParams(self) -> EString"""
        return _VISHNU.SubmitOptions_getTextParams(self, *args, **kwargs)

    def setTextParams(self, *args, **kwargs):
        """setTextParams(self, EString _textParams)"""
        return _VISHNU.SubmitOptions_setTextParams(self, *args, **kwargs)

    def getWorkId(self, *args, **kwargs):
        """getWorkId(self) -> ELong"""
        return _VISHNU.SubmitOptions_getWorkId(self, *args, **kwargs)

    def setWorkId(self, *args, **kwargs):
        """setWorkId(self, ELong _workId)"""
        return _VISHNU.SubmitOptions_setWorkId(self, *args, **kwargs)

    def getSpecificParams(self, *args, **kwargs):
        """getSpecificParams(self) -> EString"""
        return _VISHNU.SubmitOptions_getSpecificParams(self, *args, **kwargs)

    def setSpecificParams(self, *args, **kwargs):
        """setSpecificParams(self, EString _specificParams)"""
        return _VISHNU.SubmitOptions_setSpecificParams(self, *args, **kwargs)

    def isPosix(self, *args, **kwargs):
        """isPosix(self) -> EBoolean"""
        return _VISHNU.SubmitOptions_isPosix(self, *args, **kwargs)

    def setPosix(self, *args, **kwargs):
        """setPosix(self, EBoolean _posix)"""
        return _VISHNU.SubmitOptions_setPosix(self, *args, **kwargs)

    def getCriterion(self, *args, **kwargs):
        """getCriterion(self) -> LoadCriterion_ptr"""
        return _VISHNU.SubmitOptions_getCriterion(self, *args, **kwargs)

    def setCriterion(self, *args, **kwargs):
        """setCriterion(self, LoadCriterion_ptr _criterion)"""
        return _VISHNU.SubmitOptions_setCriterion(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(self, EInt _featureID, EBoolean _resolve) -> EJavaObject"""
        return _VISHNU.SubmitOptions_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(self, EInt _featureID, EJavaObject _newValue)"""
        return _VISHNU.SubmitOptions_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(self, EInt _featureID) -> EBoolean"""
        return _VISHNU.SubmitOptions_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(self, EInt _featureID)"""
        return _VISHNU.SubmitOptions_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(self) -> EClass_ptr"""
        return _VISHNU.SubmitOptions__eClass(self, *args, **kwargs)

SubmitOptions_swigregister = _VISHNU.SubmitOptions_swigregister
SubmitOptions_swigregister(SubmitOptions)

class LoadCriterion(EObject):
    """Proxy of C++ TMS_Data::LoadCriterion class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LoadCriterion, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LoadCriterion, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(self) -> LoadCriterion"""
        this = _VISHNU.new_LoadCriterion(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_LoadCriterion
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(self)"""
        return _VISHNU.LoadCriterion__initialize(self, *args, **kwargs)

    def getLoadType(self, *args, **kwargs):
        """getLoadType(self) -> LoadType"""
        return _VISHNU.LoadCriterion_getLoadType(self, *args, **kwargs)

    def setLoadType(self, *args, **kwargs):
        """setLoadType(self, LoadType _loadType)"""
        return _VISHNU.LoadCriterion_setLoadType(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(self, EInt _featureID, EBoolean _resolve) -> EJavaObject"""
        return _VISHNU.LoadCriterion_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(self, EInt _featureID, EJavaObject _newValue)"""
        return _VISHNU.LoadCriterion_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(self, EInt _featureID) -> EBoolean"""
        return _VISHNU.LoadCriterion_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(self, EInt _featureID)"""
        return _VISHNU.LoadCriterion_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(self) -> EClass_ptr"""
        return _VISHNU.LoadCriterion__eClass(self, *args, **kwargs)

LoadCriterion_swigregister = _VISHNU.LoadCriterion_swigregister
LoadCriterion_swigregister(LoadCriterion)

class Work(EObject):
    """Proxy of C++ TMS_Data::Work class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Work, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Work, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(self) -> Work"""
        this = _VISHNU.new_Work(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_Work
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(self)"""
        return _VISHNU.Work__initialize(self, *args, **kwargs)

    def getSessionId(self, *args, **kwargs):
        """getSessionId(self) -> EString"""
        return _VISHNU.Work_getSessionId(self, *args, **kwargs)

    def setSessionId(self, *args, **kwargs):
        """setSessionId(self, EString _sessionId)"""
        return _VISHNU.Work_setSessionId(self, *args, **kwargs)

    def getApplicationId(self, *args, **kwargs):
        """getApplicationId(self) -> EString"""
        return _VISHNU.Work_getApplicationId(self, *args, **kwargs)

    def setApplicationId(self, *args, **kwargs):
        """setApplicationId(self, EString _applicationId)"""
        return _VISHNU.Work_setApplicationId(self, *args, **kwargs)

    def getSubject(self, *args, **kwargs):
        """getSubject(self) -> EString"""
        return _VISHNU.Work_getSubject(self, *args, **kwargs)

    def setSubject(self, *args, **kwargs):
        """setSubject(self, EString _subject)"""
        return _VISHNU.Work_setSubject(self, *args, **kwargs)

    def getPriority(self, *args, **kwargs):
        """getPriority(self) -> EInt"""
        return _VISHNU.Work_getPriority(self, *args, **kwargs)

    def setPriority(self, *args, **kwargs):
        """setPriority(self, EInt _priority)"""
        return _VISHNU.Work_setPriority(self, *args, **kwargs)

    def getStatus(self, *args, **kwargs):
        """getStatus(self) -> EInt"""
        return _VISHNU.Work_getStatus(self, *args, **kwargs)

    def setStatus(self, *args, **kwargs):
        """setStatus(self, EInt _status)"""
        return _VISHNU.Work_setStatus(self, *args, **kwargs)

    def getEndDate(self, *args, **kwargs):
        """getEndDate(self) -> ELong"""
        return _VISHNU.Work_getEndDate(self, *args, **kwargs)

    def setEndDate(self, *args, **kwargs):
        """setEndDate(self, ELong _endDate)"""
        return _VISHNU.Work_setEndDate(self, *args, **kwargs)

    def getOwner(self, *args, **kwargs):
        """getOwner(self) -> EString"""
        return _VISHNU.Work_getOwner(self, *args, **kwargs)

    def setOwner(self, *args, **kwargs):
        """setOwner(self, EString _owner)"""
        return _VISHNU.Work_setOwner(self, *args, **kwargs)

    def getEstimatedHour(self, *args, **kwargs):
        """getEstimatedHour(self) -> ELong"""
        return _VISHNU.Work_getEstimatedHour(self, *args, **kwargs)

    def setEstimatedHour(self, *args, **kwargs):
        """setEstimatedHour(self, ELong _estimatedHour)"""
        return _VISHNU.Work_setEstimatedHour(self, *args, **kwargs)

    def getDoneRatio(self, *args, **kwargs):
        """getDoneRatio(self) -> EInt"""
        return _VISHNU.Work_getDoneRatio(self, *args, **kwargs)

    def setDoneRatio(self, *args, **kwargs):
        """setDoneRatio(self, EInt _doneRatio)"""
        return _VISHNU.Work_setDoneRatio(self, *args, **kwargs)

    def getDescription(self, *args, **kwargs):
        """getDescription(self) -> EString"""
        return _VISHNU.Work_getDescription(self, *args, **kwargs)

    def setDescription(self, *args, **kwargs):
        """setDescription(self, EString _description)"""
        return _VISHNU.Work_setDescription(self, *args, **kwargs)

    def getDateCreated(self, *args, **kwargs):
        """getDateCreated(self) -> ELong"""
        return _VISHNU.Work_getDateCreated(self, *args, **kwargs)

    def setDateCreated(self, *args, **kwargs):
        """setDateCreated(self, ELong _dateCreated)"""
        return _VISHNU.Work_setDateCreated(self, *args, **kwargs)

    def getDateEnded(self, *args, **kwargs):
        """getDateEnded(self) -> ELong"""
        return _VISHNU.Work_getDateEnded(self, *args, **kwargs)

    def setDateEnded(self, *args, **kwargs):
        """setDateEnded(self, ELong _dateEnded)"""
        return _VISHNU.Work_setDateEnded(self, *args, **kwargs)

    def getDateStarted(self, *args, **kwargs):
        """getDateStarted(self) -> ELong"""
        return _VISHNU.Work_getDateStarted(self, *args, **kwargs)

    def setDateStarted(self, *args, **kwargs):
        """setDateStarted(self, ELong _dateStarted)"""
        return _VISHNU.Work_setDateStarted(self, *args, **kwargs)

    def getLastUpdated(self, *args, **kwargs):
        """getLastUpdated(self) -> ELong"""
        return _VISHNU.Work_getLastUpdated(self, *args, **kwargs)

    def setLastUpdated(self, *args, **kwargs):
        """setLastUpdated(self, ELong _lastUpdated)"""
        return _VISHNU.Work_setLastUpdated(self, *args, **kwargs)

    def getWorkId(self, *args, **kwargs):
        """getWorkId(self) -> EString"""
        return _VISHNU.Work_getWorkId(self, *args, **kwargs)

    def setWorkId(self, *args, **kwargs):
        """setWorkId(self, EString _workId)"""
        return _VISHNU.Work_setWorkId(self, *args, **kwargs)

    def getProjectId(self, *args, **kwargs):
        """getProjectId(self) -> EString"""
        return _VISHNU.Work_getProjectId(self, *args, **kwargs)

    def setProjectId(self, *args, **kwargs):
        """setProjectId(self, EString _projectId)"""
        return _VISHNU.Work_setProjectId(self, *args, **kwargs)

    def getSubmitDate(self, *args, **kwargs):
        """getSubmitDate(self) -> ELong"""
        return _VISHNU.Work_getSubmitDate(self, *args, **kwargs)

    def setSubmitDate(self, *args, **kwargs):
        """setSubmitDate(self, ELong _submitDate)"""
        return _VISHNU.Work_setSubmitDate(self, *args, **kwargs)

    def getMachineId(self, *args, **kwargs):
        """getMachineId(self) -> EString"""
        return _VISHNU.Work_getMachineId(self, *args, **kwargs)

    def setMachineId(self, *args, **kwargs):
        """setMachineId(self, EString _machineId)"""
        return _VISHNU.Work_setMachineId(self, *args, **kwargs)

    def getNbCPU(self, *args, **kwargs):
        """getNbCPU(self) -> EInt"""
        return _VISHNU.Work_getNbCPU(self, *args, **kwargs)

    def setNbCPU(self, *args, **kwargs):
        """setNbCPU(self, EInt _nbCPU)"""
        return _VISHNU.Work_setNbCPU(self, *args, **kwargs)

    def getDueDate(self, *args, **kwargs):
        """getDueDate(self) -> ELong"""
        return _VISHNU.Work_getDueDate(self, *args, **kwargs)

    def setDueDate(self, *args, **kwargs):
        """setDueDate(self, ELong _dueDate)"""
        return _VISHNU.Work_setDueDate(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(self, EInt _featureID, EBoolean _resolve) -> EJavaObject"""
        return _VISHNU.Work_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(self, EInt _featureID, EJavaObject _newValue)"""
        return _VISHNU.Work_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(self, EInt _featureID) -> EBoolean"""
        return _VISHNU.Work_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(self, EInt _featureID)"""
        return _VISHNU.Work_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(self) -> EClass_ptr"""
        return _VISHNU.Work__eClass(self, *args, **kwargs)

Work_swigregister = _VISHNU.Work_swigregister
Work_swigregister(Work)

class AddWorkOptions(EObject):
    """Proxy of C++ TMS_Data::AddWorkOptions class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AddWorkOptions, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AddWorkOptions, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(self) -> AddWorkOptions"""
        this = _VISHNU.new_AddWorkOptions(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_AddWorkOptions
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(self)"""
        return _VISHNU.AddWorkOptions__initialize(self, *args, **kwargs)

    def getApplicationId(self, *args, **kwargs):
        """getApplicationId(self) -> EString"""
        return _VISHNU.AddWorkOptions_getApplicationId(self, *args, **kwargs)

    def setApplicationId(self, *args, **kwargs):
        """setApplicationId(self, EString _applicationId)"""
        return _VISHNU.AddWorkOptions_setApplicationId(self, *args, **kwargs)

    def getSubject(self, *args, **kwargs):
        """getSubject(self) -> EString"""
        return _VISHNU.AddWorkOptions_getSubject(self, *args, **kwargs)

    def setSubject(self, *args, **kwargs):
        """setSubject(self, EString _subject)"""
        return _VISHNU.AddWorkOptions_setSubject(self, *args, **kwargs)

    def getPriority(self, *args, **kwargs):
        """getPriority(self) -> EInt"""
        return _VISHNU.AddWorkOptions_getPriority(self, *args, **kwargs)

    def setPriority(self, *args, **kwargs):
        """setPriority(self, EInt _priority)"""
        return _VISHNU.AddWorkOptions_setPriority(self, *args, **kwargs)

    def getOwner(self, *args, **kwargs):
        """getOwner(self) -> EString"""
        return _VISHNU.AddWorkOptions_getOwner(self, *args, **kwargs)

    def setOwner(self, *args, **kwargs):
        """setOwner(self, EString _owner)"""
        return _VISHNU.AddWorkOptions_setOwner(self, *args, **kwargs)

    def getEstimatedHour(self, *args, **kwargs):
        """getEstimatedHour(self) -> ELong"""
        return _VISHNU.AddWorkOptions_getEstimatedHour(self, *args, **kwargs)

    def setEstimatedHour(self, *args, **kwargs):
        """setEstimatedHour(self, ELong _estimatedHour)"""
        return _VISHNU.AddWorkOptions_setEstimatedHour(self, *args, **kwargs)

    def getDescription(self, *args, **kwargs):
        """getDescription(self) -> EString"""
        return _VISHNU.AddWorkOptions_getDescription(self, *args, **kwargs)

    def setDescription(self, *args, **kwargs):
        """setDescription(self, EString _description)"""
        return _VISHNU.AddWorkOptions_setDescription(self, *args, **kwargs)

    def getProjectId(self, *args, **kwargs):
        """getProjectId(self) -> EString"""
        return _VISHNU.AddWorkOptions_getProjectId(self, *args, **kwargs)

    def setProjectId(self, *args, **kwargs):
        """setProjectId(self, EString _projectId)"""
        return _VISHNU.AddWorkOptions_setProjectId(self, *args, **kwargs)

    def getMachineId(self, *args, **kwargs):
        """getMachineId(self) -> EString"""
        return _VISHNU.AddWorkOptions_getMachineId(self, *args, **kwargs)

    def setMachineId(self, *args, **kwargs):
        """setMachineId(self, EString _machineId)"""
        return _VISHNU.AddWorkOptions_setMachineId(self, *args, **kwargs)

    def getNbCPU(self, *args, **kwargs):
        """getNbCPU(self) -> EInt"""
        return _VISHNU.AddWorkOptions_getNbCPU(self, *args, **kwargs)

    def setNbCPU(self, *args, **kwargs):
        """setNbCPU(self, EInt _nbCPU)"""
        return _VISHNU.AddWorkOptions_setNbCPU(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(self, EInt _featureID, EBoolean _resolve) -> EJavaObject"""
        return _VISHNU.AddWorkOptions_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(self, EInt _featureID, EJavaObject _newValue)"""
        return _VISHNU.AddWorkOptions_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(self, EInt _featureID) -> EBoolean"""
        return _VISHNU.AddWorkOptions_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(self, EInt _featureID)"""
        return _VISHNU.AddWorkOptions_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(self) -> EClass_ptr"""
        return _VISHNU.AddWorkOptions__eClass(self, *args, **kwargs)

AddWorkOptions_swigregister = _VISHNU.AddWorkOptions_swigregister
AddWorkOptions_swigregister(AddWorkOptions)

class ExportOp(EObject):
    """Proxy of C++ IMS_Data::ExportOp class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExportOp, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExportOp, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(self) -> ExportOp"""
        this = _VISHNU.new_ExportOp(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_ExportOp
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(self)"""
        return _VISHNU.ExportOp__initialize(self, *args, **kwargs)

    def getExportType(self, *args, **kwargs):
        """getExportType(self) -> ExportType"""
        return _VISHNU.ExportOp_getExportType(self, *args, **kwargs)

    def setExportType(self, *args, **kwargs):
        """setExportType(self, ExportType _exportType)"""
        return _VISHNU.ExportOp_setExportType(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(self, EInt _featureID, EBoolean _resolve) -> EJavaObject"""
        return _VISHNU.ExportOp_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(self, EInt _featureID, EJavaObject _newValue)"""
        return _VISHNU.ExportOp_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(self, EInt _featureID) -> EBoolean"""
        return _VISHNU.ExportOp_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(self, EInt _featureID)"""
        return _VISHNU.ExportOp_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(self) -> EClass_ptr"""
        return _VISHNU.ExportOp__eClass(self, *args, **kwargs)

ExportOp_swigregister = _VISHNU.ExportOp_swigregister
ExportOp_swigregister(ExportOp)

class CurMetricOp(EObject):
    """Proxy of C++ IMS_Data::CurMetricOp class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CurMetricOp, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CurMetricOp, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(self) -> CurMetricOp"""
        this = _VISHNU.new_CurMetricOp(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_CurMetricOp
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(self)"""
        return _VISHNU.CurMetricOp__initialize(self, *args, **kwargs)

    def getMetricType(self, *args, **kwargs):
        """getMetricType(self) -> MetricType"""
        return _VISHNU.CurMetricOp_getMetricType(self, *args, **kwargs)

    def setMetricType(self, *args, **kwargs):
        """setMetricType(self, MetricType _metricType)"""
        return _VISHNU.CurMetricOp_setMetricType(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(self, EInt _featureID, EBoolean _resolve) -> EJavaObject"""
        return _VISHNU.CurMetricOp_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(self, EInt _featureID, EJavaObject _newValue)"""
        return _VISHNU.CurMetricOp_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(self, EInt _featureID) -> EBoolean"""
        return _VISHNU.CurMetricOp_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(self, EInt _featureID)"""
        return _VISHNU.CurMetricOp_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(self) -> EClass_ptr"""
        return _VISHNU.CurMetricOp__eClass(self, *args, **kwargs)

CurMetricOp_swigregister = _VISHNU.CurMetricOp_swigregister
CurMetricOp_swigregister(CurMetricOp)

class Metric(EObject):
    """Proxy of C++ IMS_Data::Metric class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Metric, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Metric, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(self) -> Metric"""
        this = _VISHNU.new_Metric(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_Metric
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(self)"""
        return _VISHNU.Metric__initialize(self, *args, **kwargs)

    def getType(self, *args, **kwargs):
        """getType(self) -> MetricType"""
        return _VISHNU.Metric_getType(self, *args, **kwargs)

    def setType(self, *args, **kwargs):
        """setType(self, MetricType _type)"""
        return _VISHNU.Metric_setType(self, *args, **kwargs)

    def getValue(self, *args, **kwargs):
        """getValue(self) -> ELong"""
        return _VISHNU.Metric_getValue(self, *args, **kwargs)

    def setValue(self, *args, **kwargs):
        """setValue(self, ELong _value)"""
        return _VISHNU.Metric_setValue(self, *args, **kwargs)

    def getTime(self, *args, **kwargs):
        """getTime(self) -> ELong"""
        return _VISHNU.Metric_getTime(self, *args, **kwargs)

    def setTime(self, *args, **kwargs):
        """setTime(self, ELong _time)"""
        return _VISHNU.Metric_setTime(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(self, EInt _featureID, EBoolean _resolve) -> EJavaObject"""
        return _VISHNU.Metric_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(self, EInt _featureID, EJavaObject _newValue)"""
        return _VISHNU.Metric_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(self, EInt _featureID) -> EBoolean"""
        return _VISHNU.Metric_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(self, EInt _featureID)"""
        return _VISHNU.Metric_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(self) -> EClass_ptr"""
        return _VISHNU.Metric__eClass(self, *args, **kwargs)

Metric_swigregister = _VISHNU.Metric_swigregister
Metric_swigregister(Metric)

class MetricHistOp(EObject):
    """Proxy of C++ IMS_Data::MetricHistOp class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MetricHistOp, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MetricHistOp, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(self) -> MetricHistOp"""
        this = _VISHNU.new_MetricHistOp(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_MetricHistOp
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(self)"""
        return _VISHNU.MetricHistOp__initialize(self, *args, **kwargs)

    def getStartTime(self, *args, **kwargs):
        """getStartTime(self) -> ELong"""
        return _VISHNU.MetricHistOp_getStartTime(self, *args, **kwargs)

    def setStartTime(self, *args, **kwargs):
        """setStartTime(self, ELong _startTime)"""
        return _VISHNU.MetricHistOp_setStartTime(self, *args, **kwargs)

    def getEndTime(self, *args, **kwargs):
        """getEndTime(self) -> ELong"""
        return _VISHNU.MetricHistOp_getEndTime(self, *args, **kwargs)

    def setEndTime(self, *args, **kwargs):
        """setEndTime(self, ELong _endTime)"""
        return _VISHNU.MetricHistOp_setEndTime(self, *args, **kwargs)

    def getType(self, *args, **kwargs):
        """getType(self) -> MetricType"""
        return _VISHNU.MetricHistOp_getType(self, *args, **kwargs)

    def setType(self, *args, **kwargs):
        """setType(self, MetricType _type)"""
        return _VISHNU.MetricHistOp_setType(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(self, EInt _featureID, EBoolean _resolve) -> EJavaObject"""
        return _VISHNU.MetricHistOp_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(self, EInt _featureID, EJavaObject _newValue)"""
        return _VISHNU.MetricHistOp_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(self, EInt _featureID) -> EBoolean"""
        return _VISHNU.MetricHistOp_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(self, EInt _featureID)"""
        return _VISHNU.MetricHistOp_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(self) -> EClass_ptr"""
        return _VISHNU.MetricHistOp__eClass(self, *args, **kwargs)

MetricHistOp_swigregister = _VISHNU.MetricHistOp_swigregister
MetricHistOp_swigregister(MetricHistOp)

class Process(EObject):
    """Proxy of C++ IMS_Data::Process class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Process, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Process, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(self) -> Process"""
        this = _VISHNU.new_Process(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_Process
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(self)"""
        return _VISHNU.Process__initialize(self, *args, **kwargs)

    def getProcessName(self, *args, **kwargs):
        """getProcessName(self) -> EString"""
        return _VISHNU.Process_getProcessName(self, *args, **kwargs)

    def setProcessName(self, *args, **kwargs):
        """setProcessName(self, EString _processName)"""
        return _VISHNU.Process_setProcessName(self, *args, **kwargs)

    def getMachineId(self, *args, **kwargs):
        """getMachineId(self) -> EString"""
        return _VISHNU.Process_getMachineId(self, *args, **kwargs)

    def setMachineId(self, *args, **kwargs):
        """setMachineId(self, EString _machineId)"""
        return _VISHNU.Process_setMachineId(self, *args, **kwargs)

    def getDietId(self, *args, **kwargs):
        """getDietId(self) -> EString"""
        return _VISHNU.Process_getDietId(self, *args, **kwargs)

    def setDietId(self, *args, **kwargs):
        """setDietId(self, EString _dietId)"""
        return _VISHNU.Process_setDietId(self, *args, **kwargs)

    def getState(self, *args, **kwargs):
        """getState(self) -> ProcessState"""
        return _VISHNU.Process_getState(self, *args, **kwargs)

    def setState(self, *args, **kwargs):
        """setState(self, ProcessState _state)"""
        return _VISHNU.Process_setState(self, *args, **kwargs)

    def getTimestamp(self, *args, **kwargs):
        """getTimestamp(self) -> ELong"""
        return _VISHNU.Process_getTimestamp(self, *args, **kwargs)

    def setTimestamp(self, *args, **kwargs):
        """setTimestamp(self, ELong _timestamp)"""
        return _VISHNU.Process_setTimestamp(self, *args, **kwargs)

    def getScript(self, *args, **kwargs):
        """getScript(self) -> EString"""
        return _VISHNU.Process_getScript(self, *args, **kwargs)

    def setScript(self, *args, **kwargs):
        """setScript(self, EString _script)"""
        return _VISHNU.Process_setScript(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(self, EInt _featureID, EBoolean _resolve) -> EJavaObject"""
        return _VISHNU.Process_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(self, EInt _featureID, EJavaObject _newValue)"""
        return _VISHNU.Process_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(self, EInt _featureID) -> EBoolean"""
        return _VISHNU.Process_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(self, EInt _featureID)"""
        return _VISHNU.Process_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(self) -> EClass_ptr"""
        return _VISHNU.Process__eClass(self, *args, **kwargs)

Process_swigregister = _VISHNU.Process_swigregister
Process_swigregister(Process)

class ProcessOp(EObject):
    """Proxy of C++ IMS_Data::ProcessOp class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProcessOp, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ProcessOp, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(self) -> ProcessOp"""
        this = _VISHNU.new_ProcessOp(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_ProcessOp
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(self)"""
        return _VISHNU.ProcessOp__initialize(self, *args, **kwargs)

    def getMachineId(self, *args, **kwargs):
        """getMachineId(self) -> EString"""
        return _VISHNU.ProcessOp_getMachineId(self, *args, **kwargs)

    def setMachineId(self, *args, **kwargs):
        """setMachineId(self, EString _machineId)"""
        return _VISHNU.ProcessOp_setMachineId(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(self, EInt _featureID, EBoolean _resolve) -> EJavaObject"""
        return _VISHNU.ProcessOp_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(self, EInt _featureID, EJavaObject _newValue)"""
        return _VISHNU.ProcessOp_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(self, EInt _featureID) -> EBoolean"""
        return _VISHNU.ProcessOp_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(self, EInt _featureID)"""
        return _VISHNU.ProcessOp_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(self) -> EClass_ptr"""
        return _VISHNU.ProcessOp__eClass(self, *args, **kwargs)

ProcessOp_swigregister = _VISHNU.ProcessOp_swigregister
ProcessOp_swigregister(ProcessOp)

class SysInfoOp(EObject):
    """Proxy of C++ IMS_Data::SysInfoOp class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SysInfoOp, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SysInfoOp, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(self) -> SysInfoOp"""
        this = _VISHNU.new_SysInfoOp(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_SysInfoOp
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(self)"""
        return _VISHNU.SysInfoOp__initialize(self, *args, **kwargs)

    def getMachineId(self, *args, **kwargs):
        """getMachineId(self) -> EString"""
        return _VISHNU.SysInfoOp_getMachineId(self, *args, **kwargs)

    def setMachineId(self, *args, **kwargs):
        """setMachineId(self, EString _machineId)"""
        return _VISHNU.SysInfoOp_setMachineId(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(self, EInt _featureID, EBoolean _resolve) -> EJavaObject"""
        return _VISHNU.SysInfoOp_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(self, EInt _featureID, EJavaObject _newValue)"""
        return _VISHNU.SysInfoOp_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(self, EInt _featureID) -> EBoolean"""
        return _VISHNU.SysInfoOp_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(self, EInt _featureID)"""
        return _VISHNU.SysInfoOp_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(self) -> EClass_ptr"""
        return _VISHNU.SysInfoOp__eClass(self, *args, **kwargs)

SysInfoOp_swigregister = _VISHNU.SysInfoOp_swigregister
SysInfoOp_swigregister(SysInfoOp)

class SupervisorOp(EObject):
    """Proxy of C++ IMS_Data::SupervisorOp class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SupervisorOp, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SupervisorOp, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(self) -> SupervisorOp"""
        this = _VISHNU.new_SupervisorOp(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_SupervisorOp
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(self)"""
        return _VISHNU.SupervisorOp__initialize(self, *args, **kwargs)

    def getURI(self, *args, **kwargs):
        """getURI(self) -> EString"""
        return _VISHNU.SupervisorOp_getURI(self, *args, **kwargs)

    def setURI(self, *args, **kwargs):
        """setURI(self, EString _URI)"""
        return _VISHNU.SupervisorOp_setURI(self, *args, **kwargs)

    def getName(self, *args, **kwargs):
        """getName(self) -> EString"""
        return _VISHNU.SupervisorOp_getName(self, *args, **kwargs)

    def setName(self, *args, **kwargs):
        """setName(self, EString _name)"""
        return _VISHNU.SupervisorOp_setName(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(self, EInt _featureID, EBoolean _resolve) -> EJavaObject"""
        return _VISHNU.SupervisorOp_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(self, EInt _featureID, EJavaObject _newValue)"""
        return _VISHNU.SupervisorOp_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(self, EInt _featureID) -> EBoolean"""
        return _VISHNU.SupervisorOp_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(self, EInt _featureID)"""
        return _VISHNU.SupervisorOp_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(self) -> EClass_ptr"""
        return _VISHNU.SupervisorOp__eClass(self, *args, **kwargs)

SupervisorOp_swigregister = _VISHNU.SupervisorOp_swigregister
SupervisorOp_swigregister(SupervisorOp)

class SystemInfo(EObject):
    """Proxy of C++ IMS_Data::SystemInfo class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SystemInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SystemInfo, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(self) -> SystemInfo"""
        this = _VISHNU.new_SystemInfo(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_SystemInfo
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(self)"""
        return _VISHNU.SystemInfo__initialize(self, *args, **kwargs)

    def getMemory(self, *args, **kwargs):
        """getMemory(self) -> ELong"""
        return _VISHNU.SystemInfo_getMemory(self, *args, **kwargs)

    def setMemory(self, *args, **kwargs):
        """setMemory(self, ELong _memory)"""
        return _VISHNU.SystemInfo_setMemory(self, *args, **kwargs)

    def getDiskSpace(self, *args, **kwargs):
        """getDiskSpace(self) -> ELong"""
        return _VISHNU.SystemInfo_getDiskSpace(self, *args, **kwargs)

    def setDiskSpace(self, *args, **kwargs):
        """setDiskSpace(self, ELong _diskSpace)"""
        return _VISHNU.SystemInfo_setDiskSpace(self, *args, **kwargs)

    def getMachineId(self, *args, **kwargs):
        """getMachineId(self) -> EString"""
        return _VISHNU.SystemInfo_getMachineId(self, *args, **kwargs)

    def setMachineId(self, *args, **kwargs):
        """setMachineId(self, EString _machineId)"""
        return _VISHNU.SystemInfo_setMachineId(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(self, EInt _featureID, EBoolean _resolve) -> EJavaObject"""
        return _VISHNU.SystemInfo_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(self, EInt _featureID, EJavaObject _newValue)"""
        return _VISHNU.SystemInfo_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(self, EInt _featureID) -> EBoolean"""
        return _VISHNU.SystemInfo_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(self, EInt _featureID)"""
        return _VISHNU.SystemInfo_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(self) -> EClass_ptr"""
        return _VISHNU.SystemInfo__eClass(self, *args, **kwargs)

SystemInfo_swigregister = _VISHNU.SystemInfo_swigregister
SystemInfo_swigregister(SystemInfo)

class Threshold(EObject):
    """Proxy of C++ IMS_Data::Threshold class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Threshold, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Threshold, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(self) -> Threshold"""
        this = _VISHNU.new_Threshold(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_Threshold
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(self)"""
        return _VISHNU.Threshold__initialize(self, *args, **kwargs)

    def getValue(self, *args, **kwargs):
        """getValue(self) -> ELong"""
        return _VISHNU.Threshold_getValue(self, *args, **kwargs)

    def setValue(self, *args, **kwargs):
        """setValue(self, ELong _value)"""
        return _VISHNU.Threshold_setValue(self, *args, **kwargs)

    def getMachineId(self, *args, **kwargs):
        """getMachineId(self) -> EString"""
        return _VISHNU.Threshold_getMachineId(self, *args, **kwargs)

    def setMachineId(self, *args, **kwargs):
        """setMachineId(self, EString _machineId)"""
        return _VISHNU.Threshold_setMachineId(self, *args, **kwargs)

    def getType(self, *args, **kwargs):
        """getType(self) -> MetricType"""
        return _VISHNU.Threshold_getType(self, *args, **kwargs)

    def setType(self, *args, **kwargs):
        """setType(self, MetricType _type)"""
        return _VISHNU.Threshold_setType(self, *args, **kwargs)

    def getHandler(self, *args, **kwargs):
        """getHandler(self) -> EString"""
        return _VISHNU.Threshold_getHandler(self, *args, **kwargs)

    def setHandler(self, *args, **kwargs):
        """setHandler(self, EString _handler)"""
        return _VISHNU.Threshold_setHandler(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(self, EInt _featureID, EBoolean _resolve) -> EJavaObject"""
        return _VISHNU.Threshold_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(self, EInt _featureID, EJavaObject _newValue)"""
        return _VISHNU.Threshold_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(self, EInt _featureID) -> EBoolean"""
        return _VISHNU.Threshold_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(self, EInt _featureID)"""
        return _VISHNU.Threshold_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(self) -> EClass_ptr"""
        return _VISHNU.Threshold__eClass(self, *args, **kwargs)

Threshold_swigregister = _VISHNU.Threshold_swigregister
Threshold_swigregister(Threshold)

class ThresholdOp(EObject):
    """Proxy of C++ IMS_Data::ThresholdOp class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ThresholdOp, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ThresholdOp, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(self) -> ThresholdOp"""
        this = _VISHNU.new_ThresholdOp(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_ThresholdOp
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(self)"""
        return _VISHNU.ThresholdOp__initialize(self, *args, **kwargs)

    def getMachineId(self, *args, **kwargs):
        """getMachineId(self) -> EString"""
        return _VISHNU.ThresholdOp_getMachineId(self, *args, **kwargs)

    def setMachineId(self, *args, **kwargs):
        """setMachineId(self, EString _machineId)"""
        return _VISHNU.ThresholdOp_setMachineId(self, *args, **kwargs)

    def getMetricType(self, *args, **kwargs):
        """getMetricType(self) -> MetricType"""
        return _VISHNU.ThresholdOp_getMetricType(self, *args, **kwargs)

    def setMetricType(self, *args, **kwargs):
        """setMetricType(self, MetricType _metricType)"""
        return _VISHNU.ThresholdOp_setMetricType(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(self, EInt _featureID, EBoolean _resolve) -> EJavaObject"""
        return _VISHNU.ThresholdOp_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(self, EInt _featureID, EJavaObject _newValue)"""
        return _VISHNU.ThresholdOp_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(self, EInt _featureID) -> EBoolean"""
        return _VISHNU.ThresholdOp_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(self, EInt _featureID)"""
        return _VISHNU.ThresholdOp_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(self) -> EClass_ptr"""
        return _VISHNU.ThresholdOp__eClass(self, *args, **kwargs)

ThresholdOp_swigregister = _VISHNU.ThresholdOp_swigregister
ThresholdOp_swigregister(ThresholdOp)

class CpFileOptions(EObject):
    """Proxy of C++ FMS_Data::CpFileOptions class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CpFileOptions, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CpFileOptions, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(self) -> CpFileOptions"""
        this = _VISHNU.new_CpFileOptions(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_CpFileOptions
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(self)"""
        return _VISHNU.CpFileOptions__initialize(self, *args, **kwargs)

    def isIsRecursive(self, *args, **kwargs):
        """isIsRecursive(self) -> EBoolean"""
        return _VISHNU.CpFileOptions_isIsRecursive(self, *args, **kwargs)

    def setIsRecursive(self, *args, **kwargs):
        """setIsRecursive(self, EBoolean _isRecursive)"""
        return _VISHNU.CpFileOptions_setIsRecursive(self, *args, **kwargs)

    def getTrCommand(self, *args, **kwargs):
        """getTrCommand(self) -> TransferCommand"""
        return _VISHNU.CpFileOptions_getTrCommand(self, *args, **kwargs)

    def setTrCommand(self, *args, **kwargs):
        """setTrCommand(self, TransferCommand _trCommand)"""
        return _VISHNU.CpFileOptions_setTrCommand(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(self, EInt _featureID, EBoolean _resolve) -> EJavaObject"""
        return _VISHNU.CpFileOptions_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(self, EInt _featureID, EJavaObject _newValue)"""
        return _VISHNU.CpFileOptions_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(self, EInt _featureID) -> EBoolean"""
        return _VISHNU.CpFileOptions_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(self, EInt _featureID)"""
        return _VISHNU.CpFileOptions_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(self) -> EClass_ptr"""
        return _VISHNU.CpFileOptions__eClass(self, *args, **kwargs)

CpFileOptions_swigregister = _VISHNU.CpFileOptions_swigregister
CpFileOptions_swigregister(CpFileOptions)

class FileStat(EObject):
    """Proxy of C++ FMS_Data::FileStat class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileStat, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FileStat, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(self) -> FileStat"""
        this = _VISHNU.new_FileStat(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_FileStat
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(self)"""
        return _VISHNU.FileStat__initialize(self, *args, **kwargs)

    def getPath(self, *args, **kwargs):
        """getPath(self) -> EString"""
        return _VISHNU.FileStat_getPath(self, *args, **kwargs)

    def setPath(self, *args, **kwargs):
        """setPath(self, EString _path)"""
        return _VISHNU.FileStat_setPath(self, *args, **kwargs)

    def getOwner(self, *args, **kwargs):
        """getOwner(self) -> EString"""
        return _VISHNU.FileStat_getOwner(self, *args, **kwargs)

    def setOwner(self, *args, **kwargs):
        """setOwner(self, EString _owner)"""
        return _VISHNU.FileStat_setOwner(self, *args, **kwargs)

    def getGroup(self, *args, **kwargs):
        """getGroup(self) -> EString"""
        return _VISHNU.FileStat_getGroup(self, *args, **kwargs)

    def setGroup(self, *args, **kwargs):
        """setGroup(self, EString _group)"""
        return _VISHNU.FileStat_setGroup(self, *args, **kwargs)

    def getPerms(self, *args, **kwargs):
        """getPerms(self) -> EInt"""
        return _VISHNU.FileStat_getPerms(self, *args, **kwargs)

    def setPerms(self, *args, **kwargs):
        """setPerms(self, EInt _perms)"""
        return _VISHNU.FileStat_setPerms(self, *args, **kwargs)

    def getUid(self, *args, **kwargs):
        """getUid(self) -> ELong"""
        return _VISHNU.FileStat_getUid(self, *args, **kwargs)

    def setUid(self, *args, **kwargs):
        """setUid(self, ELong _uid)"""
        return _VISHNU.FileStat_setUid(self, *args, **kwargs)

    def getGid(self, *args, **kwargs):
        """getGid(self) -> ELong"""
        return _VISHNU.FileStat_getGid(self, *args, **kwargs)

    def setGid(self, *args, **kwargs):
        """setGid(self, ELong _gid)"""
        return _VISHNU.FileStat_setGid(self, *args, **kwargs)

    def getSize(self, *args, **kwargs):
        """getSize(self) -> EBigInteger"""
        return _VISHNU.FileStat_getSize(self, *args, **kwargs)

    def setSize(self, *args, **kwargs):
        """setSize(self, EBigInteger _size)"""
        return _VISHNU.FileStat_setSize(self, *args, **kwargs)

    def getAtime(self, *args, **kwargs):
        """getAtime(self) -> ELong"""
        return _VISHNU.FileStat_getAtime(self, *args, **kwargs)

    def setAtime(self, *args, **kwargs):
        """setAtime(self, ELong _atime)"""
        return _VISHNU.FileStat_setAtime(self, *args, **kwargs)

    def getMtime(self, *args, **kwargs):
        """getMtime(self) -> ELong"""
        return _VISHNU.FileStat_getMtime(self, *args, **kwargs)

    def setMtime(self, *args, **kwargs):
        """setMtime(self, ELong _mtime)"""
        return _VISHNU.FileStat_setMtime(self, *args, **kwargs)

    def getCtime(self, *args, **kwargs):
        """getCtime(self) -> ELong"""
        return _VISHNU.FileStat_getCtime(self, *args, **kwargs)

    def setCtime(self, *args, **kwargs):
        """setCtime(self, ELong _ctime)"""
        return _VISHNU.FileStat_setCtime(self, *args, **kwargs)

    def getType(self, *args, **kwargs):
        """getType(self) -> FileType"""
        return _VISHNU.FileStat_getType(self, *args, **kwargs)

    def setType(self, *args, **kwargs):
        """setType(self, FileType _type)"""
        return _VISHNU.FileStat_setType(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(self, EInt _featureID, EBoolean _resolve) -> EJavaObject"""
        return _VISHNU.FileStat_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(self, EInt _featureID, EJavaObject _newValue)"""
        return _VISHNU.FileStat_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(self, EInt _featureID) -> EBoolean"""
        return _VISHNU.FileStat_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(self, EInt _featureID)"""
        return _VISHNU.FileStat_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(self) -> EClass_ptr"""
        return _VISHNU.FileStat__eClass(self, *args, **kwargs)

FileStat_swigregister = _VISHNU.FileStat_swigregister
FileStat_swigregister(FileStat)

class FileTransfer(EObject):
    """Proxy of C++ FMS_Data::FileTransfer class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileTransfer, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FileTransfer, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(self) -> FileTransfer"""
        this = _VISHNU.new_FileTransfer(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_FileTransfer
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(self)"""
        return _VISHNU.FileTransfer__initialize(self, *args, **kwargs)

    def getTransferId(self, *args, **kwargs):
        """getTransferId(self) -> EString"""
        return _VISHNU.FileTransfer_getTransferId(self, *args, **kwargs)

    def setTransferId(self, *args, **kwargs):
        """setTransferId(self, EString _transferId)"""
        return _VISHNU.FileTransfer_setTransferId(self, *args, **kwargs)

    def getStatus(self, *args, **kwargs):
        """getStatus(self) -> Status"""
        return _VISHNU.FileTransfer_getStatus(self, *args, **kwargs)

    def setStatus(self, *args, **kwargs):
        """setStatus(self, Status _status)"""
        return _VISHNU.FileTransfer_setStatus(self, *args, **kwargs)

    def getUserId(self, *args, **kwargs):
        """getUserId(self) -> EString"""
        return _VISHNU.FileTransfer_getUserId(self, *args, **kwargs)

    def setUserId(self, *args, **kwargs):
        """setUserId(self, EString _userId)"""
        return _VISHNU.FileTransfer_setUserId(self, *args, **kwargs)

    def getClientMachineId(self, *args, **kwargs):
        """getClientMachineId(self) -> EString"""
        return _VISHNU.FileTransfer_getClientMachineId(self, *args, **kwargs)

    def setClientMachineId(self, *args, **kwargs):
        """setClientMachineId(self, EString _clientMachineId)"""
        return _VISHNU.FileTransfer_setClientMachineId(self, *args, **kwargs)

    def getSourceMachineId(self, *args, **kwargs):
        """getSourceMachineId(self) -> EString"""
        return _VISHNU.FileTransfer_getSourceMachineId(self, *args, **kwargs)

    def setSourceMachineId(self, *args, **kwargs):
        """setSourceMachineId(self, EString _sourceMachineId)"""
        return _VISHNU.FileTransfer_setSourceMachineId(self, *args, **kwargs)

    def getDestinationMachineId(self, *args, **kwargs):
        """getDestinationMachineId(self) -> EString"""
        return _VISHNU.FileTransfer_getDestinationMachineId(self, *args, **kwargs)

    def setDestinationMachineId(self, *args, **kwargs):
        """setDestinationMachineId(self, EString _destinationMachineId)"""
        return _VISHNU.FileTransfer_setDestinationMachineId(self, *args, **kwargs)

    def getSourceFilePath(self, *args, **kwargs):
        """getSourceFilePath(self) -> EString"""
        return _VISHNU.FileTransfer_getSourceFilePath(self, *args, **kwargs)

    def setSourceFilePath(self, *args, **kwargs):
        """setSourceFilePath(self, EString _sourceFilePath)"""
        return _VISHNU.FileTransfer_setSourceFilePath(self, *args, **kwargs)

    def getDestinationFilePath(self, *args, **kwargs):
        """getDestinationFilePath(self) -> EString"""
        return _VISHNU.FileTransfer_getDestinationFilePath(self, *args, **kwargs)

    def setDestinationFilePath(self, *args, **kwargs):
        """setDestinationFilePath(self, EString _destinationFilePath)"""
        return _VISHNU.FileTransfer_setDestinationFilePath(self, *args, **kwargs)

    def getSize(self, *args, **kwargs):
        """getSize(self) -> EBigInteger"""
        return _VISHNU.FileTransfer_getSize(self, *args, **kwargs)

    def setSize(self, *args, **kwargs):
        """setSize(self, EBigInteger _size)"""
        return _VISHNU.FileTransfer_setSize(self, *args, **kwargs)

    def getStart_time(self, *args, **kwargs):
        """getStart_time(self) -> ELong"""
        return _VISHNU.FileTransfer_getStart_time(self, *args, **kwargs)

    def setStart_time(self, *args, **kwargs):
        """setStart_time(self, ELong _start_time)"""
        return _VISHNU.FileTransfer_setStart_time(self, *args, **kwargs)

    def getTrCommand(self, *args, **kwargs):
        """getTrCommand(self) -> TransferCommand"""
        return _VISHNU.FileTransfer_getTrCommand(self, *args, **kwargs)

    def setTrCommand(self, *args, **kwargs):
        """setTrCommand(self, TransferCommand _trCommand)"""
        return _VISHNU.FileTransfer_setTrCommand(self, *args, **kwargs)

    def getErrorMsg(self, *args, **kwargs):
        """getErrorMsg(self) -> EString"""
        return _VISHNU.FileTransfer_getErrorMsg(self, *args, **kwargs)

    def setErrorMsg(self, *args, **kwargs):
        """setErrorMsg(self, EString _errorMsg)"""
        return _VISHNU.FileTransfer_setErrorMsg(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(self, EInt _featureID, EBoolean _resolve) -> EJavaObject"""
        return _VISHNU.FileTransfer_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(self, EInt _featureID, EJavaObject _newValue)"""
        return _VISHNU.FileTransfer_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(self, EInt _featureID) -> EBoolean"""
        return _VISHNU.FileTransfer_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(self, EInt _featureID)"""
        return _VISHNU.FileTransfer_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(self) -> EClass_ptr"""
        return _VISHNU.FileTransfer__eClass(self, *args, **kwargs)

FileTransfer_swigregister = _VISHNU.FileTransfer_swigregister
FileTransfer_swigregister(FileTransfer)

class HeadOfFileOptions(EObject):
    """Proxy of C++ FMS_Data::HeadOfFileOptions class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HeadOfFileOptions, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, HeadOfFileOptions, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(self) -> HeadOfFileOptions"""
        this = _VISHNU.new_HeadOfFileOptions(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_HeadOfFileOptions
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(self)"""
        return _VISHNU.HeadOfFileOptions__initialize(self, *args, **kwargs)

    def getNline(self, *args, **kwargs):
        """getNline(self) -> EInt"""
        return _VISHNU.HeadOfFileOptions_getNline(self, *args, **kwargs)

    def setNline(self, *args, **kwargs):
        """setNline(self, EInt _nline)"""
        return _VISHNU.HeadOfFileOptions_setNline(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(self, EInt _featureID, EBoolean _resolve) -> EJavaObject"""
        return _VISHNU.HeadOfFileOptions_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(self, EInt _featureID, EJavaObject _newValue)"""
        return _VISHNU.HeadOfFileOptions_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(self, EInt _featureID) -> EBoolean"""
        return _VISHNU.HeadOfFileOptions_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(self, EInt _featureID)"""
        return _VISHNU.HeadOfFileOptions_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(self) -> EClass_ptr"""
        return _VISHNU.HeadOfFileOptions__eClass(self, *args, **kwargs)

HeadOfFileOptions_swigregister = _VISHNU.HeadOfFileOptions_swigregister
HeadOfFileOptions_swigregister(HeadOfFileOptions)

class LsDirOptions(EObject):
    """Proxy of C++ FMS_Data::LsDirOptions class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LsDirOptions, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LsDirOptions, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(self) -> LsDirOptions"""
        this = _VISHNU.new_LsDirOptions(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_LsDirOptions
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(self)"""
        return _VISHNU.LsDirOptions__initialize(self, *args, **kwargs)

    def isLongFormat(self, *args, **kwargs):
        """isLongFormat(self) -> EBoolean"""
        return _VISHNU.LsDirOptions_isLongFormat(self, *args, **kwargs)

    def setLongFormat(self, *args, **kwargs):
        """setLongFormat(self, EBoolean _longFormat)"""
        return _VISHNU.LsDirOptions_setLongFormat(self, *args, **kwargs)

    def isAllFiles(self, *args, **kwargs):
        """isAllFiles(self) -> EBoolean"""
        return _VISHNU.LsDirOptions_isAllFiles(self, *args, **kwargs)

    def setAllFiles(self, *args, **kwargs):
        """setAllFiles(self, EBoolean _allFiles)"""
        return _VISHNU.LsDirOptions_setAllFiles(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(self, EInt _featureID, EBoolean _resolve) -> EJavaObject"""
        return _VISHNU.LsDirOptions_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(self, EInt _featureID, EJavaObject _newValue)"""
        return _VISHNU.LsDirOptions_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(self, EInt _featureID) -> EBoolean"""
        return _VISHNU.LsDirOptions_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(self, EInt _featureID)"""
        return _VISHNU.LsDirOptions_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(self) -> EClass_ptr"""
        return _VISHNU.LsDirOptions__eClass(self, *args, **kwargs)

LsDirOptions_swigregister = _VISHNU.LsDirOptions_swigregister
LsDirOptions_swigregister(LsDirOptions)

class LsTransferOptions(EObject):
    """Proxy of C++ FMS_Data::LsTransferOptions class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LsTransferOptions, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LsTransferOptions, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(self) -> LsTransferOptions"""
        this = _VISHNU.new_LsTransferOptions(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_LsTransferOptions
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(self)"""
        return _VISHNU.LsTransferOptions__initialize(self, *args, **kwargs)

    def getTransferId(self, *args, **kwargs):
        """getTransferId(self) -> EString"""
        return _VISHNU.LsTransferOptions_getTransferId(self, *args, **kwargs)

    def setTransferId(self, *args, **kwargs):
        """setTransferId(self, EString _transferId)"""
        return _VISHNU.LsTransferOptions_setTransferId(self, *args, **kwargs)

    def getFromMachineId(self, *args, **kwargs):
        """getFromMachineId(self) -> EString"""
        return _VISHNU.LsTransferOptions_getFromMachineId(self, *args, **kwargs)

    def setFromMachineId(self, *args, **kwargs):
        """setFromMachineId(self, EString _fromMachineId)"""
        return _VISHNU.LsTransferOptions_setFromMachineId(self, *args, **kwargs)

    def getUserId(self, *args, **kwargs):
        """getUserId(self) -> EString"""
        return _VISHNU.LsTransferOptions_getUserId(self, *args, **kwargs)

    def setUserId(self, *args, **kwargs):
        """setUserId(self, EString _userId)"""
        return _VISHNU.LsTransferOptions_setUserId(self, *args, **kwargs)

    def getStatus(self, *args, **kwargs):
        """getStatus(self) -> Status"""
        return _VISHNU.LsTransferOptions_getStatus(self, *args, **kwargs)

    def setStatus(self, *args, **kwargs):
        """setStatus(self, Status _status)"""
        return _VISHNU.LsTransferOptions_setStatus(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(self, EInt _featureID, EBoolean _resolve) -> EJavaObject"""
        return _VISHNU.LsTransferOptions_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(self, EInt _featureID, EJavaObject _newValue)"""
        return _VISHNU.LsTransferOptions_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(self, EInt _featureID) -> EBoolean"""
        return _VISHNU.LsTransferOptions_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(self, EInt _featureID)"""
        return _VISHNU.LsTransferOptions_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(self) -> EClass_ptr"""
        return _VISHNU.LsTransferOptions__eClass(self, *args, **kwargs)

LsTransferOptions_swigregister = _VISHNU.LsTransferOptions_swigregister
LsTransferOptions_swigregister(LsTransferOptions)

class StopTransferOptions(EObject):
    """Proxy of C++ FMS_Data::StopTransferOptions class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StopTransferOptions, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StopTransferOptions, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(self) -> StopTransferOptions"""
        this = _VISHNU.new_StopTransferOptions(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_StopTransferOptions
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(self)"""
        return _VISHNU.StopTransferOptions__initialize(self, *args, **kwargs)

    def getTransferId(self, *args, **kwargs):
        """getTransferId(self) -> EString"""
        return _VISHNU.StopTransferOptions_getTransferId(self, *args, **kwargs)

    def setTransferId(self, *args, **kwargs):
        """setTransferId(self, EString _transferId)"""
        return _VISHNU.StopTransferOptions_setTransferId(self, *args, **kwargs)

    def getFromMachineId(self, *args, **kwargs):
        """getFromMachineId(self) -> EString"""
        return _VISHNU.StopTransferOptions_getFromMachineId(self, *args, **kwargs)

    def setFromMachineId(self, *args, **kwargs):
        """setFromMachineId(self, EString _fromMachineId)"""
        return _VISHNU.StopTransferOptions_setFromMachineId(self, *args, **kwargs)

    def getUserId(self, *args, **kwargs):
        """getUserId(self) -> EString"""
        return _VISHNU.StopTransferOptions_getUserId(self, *args, **kwargs)

    def setUserId(self, *args, **kwargs):
        """setUserId(self, EString _userId)"""
        return _VISHNU.StopTransferOptions_setUserId(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(self, EInt _featureID, EBoolean _resolve) -> EJavaObject"""
        return _VISHNU.StopTransferOptions_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(self, EInt _featureID, EJavaObject _newValue)"""
        return _VISHNU.StopTransferOptions_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(self, EInt _featureID) -> EBoolean"""
        return _VISHNU.StopTransferOptions_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(self, EInt _featureID)"""
        return _VISHNU.StopTransferOptions_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(self) -> EClass_ptr"""
        return _VISHNU.StopTransferOptions__eClass(self, *args, **kwargs)

StopTransferOptions_swigregister = _VISHNU.StopTransferOptions_swigregister
StopTransferOptions_swigregister(StopTransferOptions)

class TailOfFileOptions(EObject):
    """Proxy of C++ FMS_Data::TailOfFileOptions class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TailOfFileOptions, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TailOfFileOptions, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(self) -> TailOfFileOptions"""
        this = _VISHNU.new_TailOfFileOptions(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_TailOfFileOptions
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(self)"""
        return _VISHNU.TailOfFileOptions__initialize(self, *args, **kwargs)

    def getNline(self, *args, **kwargs):
        """getNline(self) -> EInt"""
        return _VISHNU.TailOfFileOptions_getNline(self, *args, **kwargs)

    def setNline(self, *args, **kwargs):
        """setNline(self, EInt _nline)"""
        return _VISHNU.TailOfFileOptions_setNline(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(self, EInt _featureID, EBoolean _resolve) -> EJavaObject"""
        return _VISHNU.TailOfFileOptions_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(self, EInt _featureID, EJavaObject _newValue)"""
        return _VISHNU.TailOfFileOptions_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(self, EInt _featureID) -> EBoolean"""
        return _VISHNU.TailOfFileOptions_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(self, EInt _featureID)"""
        return _VISHNU.TailOfFileOptions_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(self) -> EClass_ptr"""
        return _VISHNU.TailOfFileOptions__eClass(self, *args, **kwargs)

TailOfFileOptions_swigregister = _VISHNU.TailOfFileOptions_swigregister
TailOfFileOptions_swigregister(TailOfFileOptions)

class RmFileOptions(EObject):
    """Proxy of C++ FMS_Data::RmFileOptions class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RmFileOptions, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RmFileOptions, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(self) -> RmFileOptions"""
        this = _VISHNU.new_RmFileOptions(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_RmFileOptions
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(self)"""
        return _VISHNU.RmFileOptions__initialize(self, *args, **kwargs)

    def isIsRecursive(self, *args, **kwargs):
        """isIsRecursive(self) -> EBoolean"""
        return _VISHNU.RmFileOptions_isIsRecursive(self, *args, **kwargs)

    def setIsRecursive(self, *args, **kwargs):
        """setIsRecursive(self, EBoolean _isRecursive)"""
        return _VISHNU.RmFileOptions_setIsRecursive(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(self, EInt _featureID, EBoolean _resolve) -> EJavaObject"""
        return _VISHNU.RmFileOptions_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(self, EInt _featureID, EJavaObject _newValue)"""
        return _VISHNU.RmFileOptions_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(self, EInt _featureID) -> EBoolean"""
        return _VISHNU.RmFileOptions_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(self, EInt _featureID)"""
        return _VISHNU.RmFileOptions_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(self) -> EClass_ptr"""
        return _VISHNU.RmFileOptions__eClass(self, *args, **kwargs)

RmFileOptions_swigregister = _VISHNU.RmFileOptions_swigregister
RmFileOptions_swigregister(RmFileOptions)

class CreateDirOptions(EObject):
    """Proxy of C++ FMS_Data::CreateDirOptions class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CreateDirOptions, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CreateDirOptions, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(self) -> CreateDirOptions"""
        this = _VISHNU.new_CreateDirOptions(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_CreateDirOptions
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(self)"""
        return _VISHNU.CreateDirOptions__initialize(self, *args, **kwargs)

    def isIsRecursive(self, *args, **kwargs):
        """isIsRecursive(self) -> EBoolean"""
        return _VISHNU.CreateDirOptions_isIsRecursive(self, *args, **kwargs)

    def setIsRecursive(self, *args, **kwargs):
        """setIsRecursive(self, EBoolean _isRecursive)"""
        return _VISHNU.CreateDirOptions_setIsRecursive(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(self, EInt _featureID, EBoolean _resolve) -> EJavaObject"""
        return _VISHNU.CreateDirOptions_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(self, EInt _featureID, EJavaObject _newValue)"""
        return _VISHNU.CreateDirOptions_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(self, EInt _featureID) -> EBoolean"""
        return _VISHNU.CreateDirOptions_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(self, EInt _featureID)"""
        return _VISHNU.CreateDirOptions_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(self) -> EClass_ptr"""
        return _VISHNU.CreateDirOptions__eClass(self, *args, **kwargs)

CreateDirOptions_swigregister = _VISHNU.CreateDirOptions_swigregister
CreateDirOptions_swigregister(CreateDirOptions)

class DirEntry(EObject):
    """Proxy of C++ FMS_Data::DirEntry class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DirEntry, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DirEntry, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(self) -> DirEntry"""
        this = _VISHNU.new_DirEntry(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_DirEntry
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(self)"""
        return _VISHNU.DirEntry__initialize(self, *args, **kwargs)

    def getPath(self, *args, **kwargs):
        """getPath(self) -> EString"""
        return _VISHNU.DirEntry_getPath(self, *args, **kwargs)

    def setPath(self, *args, **kwargs):
        """setPath(self, EString _path)"""
        return _VISHNU.DirEntry_setPath(self, *args, **kwargs)

    def getOwner(self, *args, **kwargs):
        """getOwner(self) -> EString"""
        return _VISHNU.DirEntry_getOwner(self, *args, **kwargs)

    def setOwner(self, *args, **kwargs):
        """setOwner(self, EString _owner)"""
        return _VISHNU.DirEntry_setOwner(self, *args, **kwargs)

    def getGroup(self, *args, **kwargs):
        """getGroup(self) -> EString"""
        return _VISHNU.DirEntry_getGroup(self, *args, **kwargs)

    def setGroup(self, *args, **kwargs):
        """setGroup(self, EString _group)"""
        return _VISHNU.DirEntry_setGroup(self, *args, **kwargs)

    def getPerms(self, *args, **kwargs):
        """getPerms(self) -> EInt"""
        return _VISHNU.DirEntry_getPerms(self, *args, **kwargs)

    def setPerms(self, *args, **kwargs):
        """setPerms(self, EInt _perms)"""
        return _VISHNU.DirEntry_setPerms(self, *args, **kwargs)

    def getSize(self, *args, **kwargs):
        """getSize(self) -> EBigInteger"""
        return _VISHNU.DirEntry_getSize(self, *args, **kwargs)

    def setSize(self, *args, **kwargs):
        """setSize(self, EBigInteger _size)"""
        return _VISHNU.DirEntry_setSize(self, *args, **kwargs)

    def getCreationTime(self, *args, **kwargs):
        """getCreationTime(self) -> EString"""
        return _VISHNU.DirEntry_getCreationTime(self, *args, **kwargs)

    def setCreationTime(self, *args, **kwargs):
        """setCreationTime(self, EString _creationTime)"""
        return _VISHNU.DirEntry_setCreationTime(self, *args, **kwargs)

    def getType(self, *args, **kwargs):
        """getType(self) -> FileType"""
        return _VISHNU.DirEntry_getType(self, *args, **kwargs)

    def setType(self, *args, **kwargs):
        """setType(self, FileType _type)"""
        return _VISHNU.DirEntry_setType(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(self, EInt _featureID, EBoolean _resolve) -> EJavaObject"""
        return _VISHNU.DirEntry_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(self, EInt _featureID, EJavaObject _newValue)"""
        return _VISHNU.DirEntry_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(self, EInt _featureID) -> EBoolean"""
        return _VISHNU.DirEntry_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(self, EInt _featureID)"""
        return _VISHNU.DirEntry_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(self) -> EClass_ptr"""
        return _VISHNU.DirEntry__eClass(self, *args, **kwargs)

DirEntry_swigregister = _VISHNU.DirEntry_swigregister
DirEntry_swigregister(DirEntry)


def connect(*args, **kwargs):
  """connect(string userId, string password, Session session, ConnectOptions connectOpt = UMS_Data::ConnectOptions()) -> int"""
  return _VISHNU.connect(*args, **kwargs)

def connect_m(*args, **kwargs):
  """connect_m(ListUsers users, Session session, ConnectOptions connectOpt = UMS_Data::ConnectOptions()) -> int"""
  return _VISHNU.connect_m(*args, **kwargs)

def close(*args, **kwargs):
  """close(string sessionKey) -> int"""
  return _VISHNU.close(*args, **kwargs)

def addUser(*args, **kwargs):
  """addUser(string sessionKey, User newUser) -> int"""
  return _VISHNU.addUser(*args, **kwargs)

def updateUser(*args, **kwargs):
  """updateUser(string sessionKey, User user) -> int"""
  return _VISHNU.updateUser(*args, **kwargs)

def deleteUser(*args, **kwargs):
  """deleteUser(string sessionKey, string userId) -> int"""
  return _VISHNU.deleteUser(*args, **kwargs)

def changePassword(*args, **kwargs):
  """changePassword(string userId, string password, string passwordNew) -> int"""
  return _VISHNU.changePassword(*args, **kwargs)

def resetPassword(*args, **kwargs):
  """resetPassword(string sessionKey, string userId, string tmpPassword) -> int"""
  return _VISHNU.resetPassword(*args, **kwargs)

def addMachine(*args, **kwargs):
  """addMachine(string sessionKey, Machine newMachine) -> int"""
  return _VISHNU.addMachine(*args, **kwargs)

def updateMachine(*args, **kwargs):
  """updateMachine(string sessionKey, Machine machine) -> int"""
  return _VISHNU.updateMachine(*args, **kwargs)

def deleteMachine(*args, **kwargs):
  """deleteMachine(string sessionKey, string machineId) -> int"""
  return _VISHNU.deleteMachine(*args, **kwargs)

def addLocalAccount(*args, **kwargs):
  """addLocalAccount(string sessionKey, LocalAccount newLocalAccount) -> int"""
  return _VISHNU.addLocalAccount(*args, **kwargs)

def updateLocalAccount(*args, **kwargs):
  """updateLocalAccount(string sessionKey, LocalAccount localAccount) -> int"""
  return _VISHNU.updateLocalAccount(*args, **kwargs)

def deleteLocalAccount(*args, **kwargs):
  """deleteLocalAccount(string sessionKey, string userId, string machineId) -> int"""
  return _VISHNU.deleteLocalAccount(*args, **kwargs)

def saveConfiguration(*args, **kwargs):
  """saveConfiguration(string sessionKey, Configuration config) -> int"""
  return _VISHNU.saveConfiguration(*args, **kwargs)

def restoreConfiguration(*args, **kwargs):
  """restoreConfiguration(string sessionKey, string filePath) -> int"""
  return _VISHNU.restoreConfiguration(*args, **kwargs)

def configureOption(*args, **kwargs):
  """configureOption(string sessionKey, OptionValue optionValue) -> int"""
  return _VISHNU.configureOption(*args, **kwargs)

def configureDefaultOption(*args, **kwargs):
  """configureDefaultOption(string sessionKey, OptionValue optionValue) -> int"""
  return _VISHNU.configureDefaultOption(*args, **kwargs)

def listSessions(*args, **kwargs):
  """listSessions(string sessionKey, ListSessionOptions options = UMS_Data::ListSessionOptions()) -> int"""
  return _VISHNU.listSessions(*args, **kwargs)

def listLocalAccounts(*args, **kwargs):
  """listLocalAccounts(string sessionKey, ListLocalAccOptions options = UMS_Data::ListLocalAccOptions()) -> int"""
  return _VISHNU.listLocalAccounts(*args, **kwargs)

def listMachines(*args, **kwargs):
  """listMachines(string sessionKey, ListMachineOptions options = UMS_Data::ListMachineOptions()) -> int"""
  return _VISHNU.listMachines(*args, **kwargs)

def listHistoryCmd(*args, **kwargs):
  """listHistoryCmd(string sessionKey, ListCmdOptions options = UMS_Data::ListCmdOptions()) -> int"""
  return _VISHNU.listHistoryCmd(*args, **kwargs)

def listOptions(*args, **kwargs):
  """listOptions(string sessionKey, ListOptOptions options = UMS_Data::ListOptOptions()) -> int"""
  return _VISHNU.listOptions(*args, **kwargs)

def listUsers(*args, **kwargs):
  """listUsers(string sessionKey, ListUsersOptions listOptions = UMS_Data::ListUsersOptions()) -> int"""
  return _VISHNU.listUsers(*args, **kwargs)

def addAuthSystem(*args, **kwargs):
  """addAuthSystem(string sessionKey, AuthSystem newAuthSys) -> int"""
  return _VISHNU.addAuthSystem(*args, **kwargs)

def updateAuthSystem(*args, **kwargs):
  """updateAuthSystem(string sessionKey, AuthSystem AuthSys) -> int"""
  return _VISHNU.updateAuthSystem(*args, **kwargs)

def deleteAuthSystem(*args, **kwargs):
  """deleteAuthSystem(string sessionKey, string authSystemId) -> int"""
  return _VISHNU.deleteAuthSystem(*args, **kwargs)

def listAuthSystems(*args, **kwargs):
  """listAuthSystems(string sessionKey, ListAuthSysOptions options = UMS_Data::ListAuthSysOptions()) -> int"""
  return _VISHNU.listAuthSystems(*args, **kwargs)

def addAuthAccount(*args, **kwargs):
  """addAuthAccount(string sessionKey, AuthAccount authAccount) -> int"""
  return _VISHNU.addAuthAccount(*args, **kwargs)

def updateAuthAccount(*args, **kwargs):
  """updateAuthAccount(string sessionKey, AuthAccount authenAccount) -> int"""
  return _VISHNU.updateAuthAccount(*args, **kwargs)

def deleteAuthAccount(*args, **kwargs):
  """deleteAuthAccount(string sessionKey, string authSystemId, string userIdOption = "") -> int"""
  return _VISHNU.deleteAuthAccount(*args, **kwargs)

def listAuthAccounts(*args, **kwargs):
  """listAuthAccounts(string sessionKey, ListAuthAccOptions options = UMS_Data::ListAuthAccOptions()) -> int"""
  return _VISHNU.listAuthAccounts(*args, **kwargs)

def vishnuInitialize(*args, **kwargs):
  """vishnuInitialize(char cfg) -> int"""
  return _VISHNU.vishnuInitialize(*args, **kwargs)

def vishnuFinalize(*args):
  """vishnuFinalize()"""
  return _VISHNU.vishnuFinalize(*args)

def defineUserIdentifier(*args, **kwargs):
  """defineUserIdentifier(string sessionKey, string fmt) -> int"""
  return _VISHNU.defineUserIdentifier(*args, **kwargs)

def defineMachineIdentifier(*args, **kwargs):
  """defineMachineIdentifier(string sessionKey, string fmt) -> int"""
  return _VISHNU.defineMachineIdentifier(*args, **kwargs)

def defineJobIdentifier(*args, **kwargs):
  """defineJobIdentifier(string sessionKey, string fmt) -> int"""
  return _VISHNU.defineJobIdentifier(*args, **kwargs)

def defineTransferIdentifier(*args, **kwargs):
  """defineTransferIdentifier(string sessionKey, string fmt) -> int"""
  return _VISHNU.defineTransferIdentifier(*args, **kwargs)

def defineAuthIdentifier(*args, **kwargs):
  """defineAuthIdentifier(string sessionKey, string fmt) -> int"""
  return _VISHNU.defineAuthIdentifier(*args, **kwargs)

def defineWorkIdentifier(*args, **kwargs):
  """defineWorkIdentifier(string sessionKey, string fmt) -> int"""
  return _VISHNU.defineWorkIdentifier(*args, **kwargs)
class VishnuException(Exception):
    """Proxy of C++ VishnuException class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VishnuException, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VishnuException, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    UMS = _VISHNU.VishnuException_UMS
    TMS = _VISHNU.VishnuException_TMS
    FMS = _VISHNU.VishnuException_FMS
    IMS = _VISHNU.VishnuException_IMS
    INTERNAL = _VISHNU.VishnuException_INTERNAL
    NONE = _VISHNU.VishnuException_NONE
    __swig_destroy__ = _VISHNU.delete_VishnuException
    __del__ = lambda self : None;
    def getTypeI(self, *args, **kwargs):
        """getTypeI(self) -> ExceptionType"""
        return _VISHNU.VishnuException_getTypeI(self, *args, **kwargs)

    def getTypeS(self, *args, **kwargs):
        """getTypeS(self) -> string"""
        return _VISHNU.VishnuException_getTypeS(self, *args, **kwargs)

    def what(self, *args, **kwargs):
        """what(self) -> char"""
        return _VISHNU.VishnuException_what(self, *args, **kwargs)

    def getMsg(self, *args, **kwargs):
        """getMsg(self) -> string"""
        return _VISHNU.VishnuException_getMsg(self, *args, **kwargs)

    def getMsgComp(self, *args, **kwargs):
        """getMsgComp(self) -> string"""
        return _VISHNU.VishnuException_getMsgComp(self, *args, **kwargs)

    def setType(self, *args, **kwargs):
        """setType(self, ExceptionType t)"""
        return _VISHNU.VishnuException_setType(self, *args, **kwargs)

    def setMsgComp(self, *args, **kwargs):
        """setMsgComp(self, string m)"""
        return _VISHNU.VishnuException_setMsgComp(self, *args, **kwargs)

    def setMsg(self, *args, **kwargs):
        """setMsg(self, int val)"""
        return _VISHNU.VishnuException_setMsg(self, *args, **kwargs)

    def appendMsgComp(self, *args, **kwargs):
        """appendMsgComp(self, string s)"""
        return _VISHNU.VishnuException_appendMsgComp(self, *args, **kwargs)

    def getMsgI(self, *args, **kwargs):
        """getMsgI(self) -> int"""
        return _VISHNU.VishnuException_getMsgI(self, *args, **kwargs)

    def initMsg(self, *args, **kwargs):
        """initMsg(self)"""
        return _VISHNU.VishnuException_initMsg(self, *args, **kwargs)

    def buildExceptionString(self, *args, **kwargs):
        """buildExceptionString(self) -> string"""
        return _VISHNU.VishnuException_buildExceptionString(self, *args, **kwargs)

VishnuException_swigregister = _VISHNU.VishnuException_swigregister
VishnuException_swigregister(VishnuException)

def reconnect(*args):
  """
    reconnect(string userId, string password, string sessionId, Session session) -> int
    reconnect(ListUsers users, string sessionId, Session session) -> int
    """
  return _VISHNU.reconnect(*args)
cvar = _VISHNU.cvar
VISHNU_OK = cvar.VISHNU_OK

class UserException(VishnuException):
    """Proxy of C++ UserException class"""
    __swig_setmethods__ = {}
    for _s in [VishnuException]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UserException, name, value)
    __swig_getmethods__ = {}
    for _s in [VishnuException]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, UserException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> UserException
        __init__(self, UserException e) -> UserException
        __init__(self, int msg, string msgComp = "") -> UserException
        """
        this = _VISHNU.new_UserException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_UserException
    __del__ = lambda self : None;
    def getTypeS(self, *args, **kwargs):
        """getTypeS(self) -> string"""
        return _VISHNU.UserException_getTypeS(self, *args, **kwargs)

    def getMsg(self, *args, **kwargs):
        """getMsg(self) -> string"""
        return _VISHNU.UserException_getMsg(self, *args, **kwargs)

UserException_swigregister = _VISHNU.UserException_swigregister
UserException_swigregister(UserException)
ERRCODE_INVALID_PARAM = cvar.ERRCODE_INVALID_PARAM
ERRCODE_FILENOTFOUND = cvar.ERRCODE_FILENOTFOUND
ERRCODE_CONFIGNOTFOUND = cvar.ERRCODE_CONFIGNOTFOUND
ERRCODE_CLI_ERROR_NO_SESSION = cvar.ERRCODE_CLI_ERROR_NO_SESSION
ERRCODE_CLI_ERROR_MISSING_PARAMETER = cvar.ERRCODE_CLI_ERROR_MISSING_PARAMETER
ERRCODE_CLI_ERROR_COMMUNICATION = cvar.ERRCODE_CLI_ERROR_COMMUNICATION
ERRCODE_CLI_ERROR_RUNTIME = cvar.ERRCODE_CLI_ERROR_RUNTIME

class SystemException(VishnuException):
    """Proxy of C++ SystemException class"""
    __swig_setmethods__ = {}
    for _s in [VishnuException]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SystemException, name, value)
    __swig_getmethods__ = {}
    for _s in [VishnuException]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SystemException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> SystemException
        __init__(self, SystemException e) -> SystemException
        __init__(self, int msg, string msgComp = "") -> SystemException
        """
        this = _VISHNU.new_SystemException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_SystemException
    __del__ = lambda self : None;
    def getMsg(self, *args, **kwargs):
        """getMsg(self) -> string"""
        return _VISHNU.SystemException_getMsg(self, *args, **kwargs)

    def getTypeS(self, *args, **kwargs):
        """getTypeS(self) -> string"""
        return _VISHNU.SystemException_getTypeS(self, *args, **kwargs)

    def initMsg(self, *args, **kwargs):
        """initMsg(self)"""
        return _VISHNU.SystemException_initMsg(self, *args, **kwargs)

SystemException_swigregister = _VISHNU.SystemException_swigregister
SystemException_swigregister(SystemException)
ERRCODE_AUTHENTERR = cvar.ERRCODE_AUTHENTERR
ERRCODE_COMMUNICATION = cvar.ERRCODE_COMMUNICATION
ERRCODE_DBERR = cvar.ERRCODE_DBERR
ERRCODE_DBCONN = cvar.ERRCODE_DBCONN
ERRCODE_SYSTEM = cvar.ERRCODE_SYSTEM
ERRCODE_INVCOMP = cvar.ERRCODE_INVCOMP
ERRCODE_INVMAPPER = cvar.ERRCODE_INVMAPPER
ERRCODE_INVEXCEP = cvar.ERRCODE_INVEXCEP
ERRCODE_INVDATA = cvar.ERRCODE_INVDATA
ERRCODE_SSH = cvar.ERRCODE_SSH

class UMSVishnuException(UserException):
    """Proxy of C++ UMSVishnuException class"""
    __swig_setmethods__ = {}
    for _s in [UserException]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UMSVishnuException, name, value)
    __swig_getmethods__ = {}
    for _s in [UserException]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, UMSVishnuException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> UMSVishnuException
        __init__(self, UMSVishnuException e) -> UMSVishnuException
        __init__(self, int msg, string msgComp = "") -> UMSVishnuException
        """
        this = _VISHNU.new_UMSVishnuException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_UMSVishnuException
    __del__ = lambda self : None;
    def initMsg(self, *args, **kwargs):
        """initMsg(self)"""
        return _VISHNU.UMSVishnuException_initMsg(self, *args, **kwargs)

UMSVishnuException_swigregister = _VISHNU.UMSVishnuException_swigregister
UMSVishnuException_swigregister(UMSVishnuException)
ERRCODE_UNKNOWN_USER = cvar.ERRCODE_UNKNOWN_USER
ERRCODE_UNKNOWN_USERID = cvar.ERRCODE_UNKNOWN_USERID
ERRCODE_USERID_EXISTING = cvar.ERRCODE_USERID_EXISTING
ERRCODE_USER_LOCKED = cvar.ERRCODE_USER_LOCKED
ERRCODE_USER_ALREADY_LOCKED = cvar.ERRCODE_USER_ALREADY_LOCKED
ERRCODE_NO_ADMIN = cvar.ERRCODE_NO_ADMIN
ERRCODE_TEMPORARY_PASSWORD = cvar.ERRCODE_TEMPORARY_PASSWORD
ERRCODE_INVALID_MAIL_ADRESS = cvar.ERRCODE_INVALID_MAIL_ADRESS
ERRCODE_SESSIONKEY_NOT_FOUND = cvar.ERRCODE_SESSIONKEY_NOT_FOUND
ERRCODE_SESSIONKEY_EXPIRED = cvar.ERRCODE_SESSIONKEY_EXPIRED
ERRCODE_UNKNOWN_SESSION_ID = cvar.ERRCODE_UNKNOWN_SESSION_ID
ERRCODE_COMMAND_RUNNING = cvar.ERRCODE_COMMAND_RUNNING
ERRCODE_UNKNOWN_MACHINE = cvar.ERRCODE_UNKNOWN_MACHINE
ERRCODE_MACHINE_EXISTING = cvar.ERRCODE_MACHINE_EXISTING
ERRCODE_MACHINE_LOCKED = cvar.ERRCODE_MACHINE_LOCKED
ERRCODE_MACHINE_ALREADY_LOCKED = cvar.ERRCODE_MACHINE_ALREADY_LOCKED
ERRCODE_UNUSABLE_MACHINE = cvar.ERRCODE_UNUSABLE_MACHINE
ERRCODE_LOCAL_ACCOUNT_EXIST = cvar.ERRCODE_LOCAL_ACCOUNT_EXIST
ERRCODE_UNKNOWN_LOCAL_ACCOUNT = cvar.ERRCODE_UNKNOWN_LOCAL_ACCOUNT
ERRCODE_SAVE_CONFIG_ERROR = cvar.ERRCODE_SAVE_CONFIG_ERROR
ERRCODE_RESTORE_CONFIG_ERROR = cvar.ERRCODE_RESTORE_CONFIG_ERROR
ERRCODE_UNKNOWN_OPTION = cvar.ERRCODE_UNKNOWN_OPTION
ERRCODE_UNKNOWN_CLOSURE_MODE = cvar.ERRCODE_UNKNOWN_CLOSURE_MODE
ERRCODE_INCORRECT_TIMEOUT = cvar.ERRCODE_INCORRECT_TIMEOUT
ERRCODE_INCORRECT_TRANSFER_CMD = cvar.ERRCODE_INCORRECT_TRANSFER_CMD
ERRCODE_ROOT_USER_ONLY = cvar.ERRCODE_ROOT_USER_ONLY
ERRCODE_LOGIN_ALREADY_USED = cvar.ERRCODE_LOGIN_ALREADY_USED
ERRCODE_UNKNOWN_AUTH_SYSTEM_TYPE = cvar.ERRCODE_UNKNOWN_AUTH_SYSTEM_TYPE
ERRCODE_UNKNOWN_AUTH_SYSTEM = cvar.ERRCODE_UNKNOWN_AUTH_SYSTEM
ERRCODE_AUTH_SYSTEM_ALREADY_LOCKED = cvar.ERRCODE_AUTH_SYSTEM_ALREADY_LOCKED
ERRCODE_AUTH_SYSTEM_ALREADY_EXIST = cvar.ERRCODE_AUTH_SYSTEM_ALREADY_EXIST
ERRCODE_AUTH_ACCOUNT_EXIST = cvar.ERRCODE_AUTH_ACCOUNT_EXIST
ERRCODE_UNKNOWN_AUTH_ACCOUNT = cvar.ERRCODE_UNKNOWN_AUTH_ACCOUNT
ERRCODE_UNKNOWN_ENCRYPTION_METHOD = cvar.ERRCODE_UNKNOWN_ENCRYPTION_METHOD
ERRCODE_READONLY_ACCOUNT = cvar.ERRCODE_READONLY_ACCOUNT

class TMSVishnuException(UserException):
    """Proxy of C++ TMSVishnuException class"""
    __swig_setmethods__ = {}
    for _s in [UserException]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TMSVishnuException, name, value)
    __swig_getmethods__ = {}
    for _s in [UserException]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TMSVishnuException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TMSVishnuException
        __init__(self, TMSVishnuException e) -> TMSVishnuException
        __init__(self, int msg, string msgComp = "") -> TMSVishnuException
        """
        this = _VISHNU.new_TMSVishnuException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_TMSVishnuException
    __del__ = lambda self : None;
    def initMsg(self, *args, **kwargs):
        """initMsg(self)"""
        return _VISHNU.TMSVishnuException_initMsg(self, *args, **kwargs)

TMSVishnuException_swigregister = _VISHNU.TMSVishnuException_swigregister
TMSVishnuException_swigregister(TMSVishnuException)
ERRCODE_UNKNOWN_BATCH_SCHEDULER = cvar.ERRCODE_UNKNOWN_BATCH_SCHEDULER
ERRCODE_BATCH_SCHEDULER_ERROR = cvar.ERRCODE_BATCH_SCHEDULER_ERROR
ERRCODE_UNKNOWN_JOBID = cvar.ERRCODE_UNKNOWN_JOBID
ERRCODE_PERMISSION_DENIED = cvar.ERRCODE_PERMISSION_DENIED
ERRCODE_ALREADY_TERMINATED = cvar.ERRCODE_ALREADY_TERMINATED
ERRCODE_ALREADY_CANCELED = cvar.ERRCODE_ALREADY_CANCELED
ERRCODE_JOB_IS_NOT_TERMINATED = cvar.ERRCODE_JOB_IS_NOT_TERMINATED
ERRCODE_ALREADY_DOWNLOADED = cvar.ERRCODE_ALREADY_DOWNLOADED
ERRCODE_UNKNOWN_WORKID = cvar.ERRCODE_UNKNOWN_WORKID

class IMSVishnuException(UserException):
    """Proxy of C++ IMSVishnuException class"""
    __swig_setmethods__ = {}
    for _s in [UserException]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IMSVishnuException, name, value)
    __swig_getmethods__ = {}
    for _s in [UserException]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IMSVishnuException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> IMSVishnuException
        __init__(self, IMSVishnuException e) -> IMSVishnuException
        __init__(self, int msg, string msgComp = "") -> IMSVishnuException
        """
        this = _VISHNU.new_IMSVishnuException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_IMSVishnuException
    __del__ = lambda self : None;
    def initMsg(self, *args, **kwargs):
        """initMsg(self)"""
        return _VISHNU.IMSVishnuException_initMsg(self, *args, **kwargs)

IMSVishnuException_swigregister = _VISHNU.IMSVishnuException_swigregister
IMSVishnuException_swigregister(IMSVishnuException)
ERRCODE_INVPROCESS = cvar.ERRCODE_INVPROCESS
ERRCODE_INVVISHNU = cvar.ERRCODE_INVVISHNU
ERRCODE_INVEXPORT = cvar.ERRCODE_INVEXPORT

class FMSVishnuException(UserException):
    """Proxy of C++ FMSVishnuException class"""
    __swig_setmethods__ = {}
    for _s in [UserException]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FMSVishnuException, name, value)
    __swig_getmethods__ = {}
    for _s in [UserException]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FMSVishnuException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> FMSVishnuException
        __init__(self, FMSVishnuException e) -> FMSVishnuException
        __init__(self, int msg, string msgComp = "") -> FMSVishnuException
        """
        this = _VISHNU.new_FMSVishnuException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_FMSVishnuException
    __del__ = lambda self : None;
    def initMsg(self, *args, **kwargs):
        """initMsg(self)"""
        return _VISHNU.FMSVishnuException_initMsg(self, *args, **kwargs)

FMSVishnuException_swigregister = _VISHNU.FMSVishnuException_swigregister
FMSVishnuException_swigregister(FMSVishnuException)
ERRCODE_INVALID_PATH = cvar.ERRCODE_INVALID_PATH
ERRCODE_RUNTIME_ERROR = cvar.ERRCODE_RUNTIME_ERROR
ERRCODE_UNKNOWN_FILETRANSFERID = cvar.ERRCODE_UNKNOWN_FILETRANSFERID


def submitJob(*args, **kwargs):
  """
    submitJob(string sessionKey, string machineId, string scriptFilePath, 
        Job jobInfo, SubmitOptions options = TMS_Data::SubmitOptions()) -> int
    """
  return _VISHNU.submitJob(*args, **kwargs)

def addWork(*args, **kwargs):
  """addWork(string sessionKey, Work newWork, AddWorkOptions options = TMS_Data::AddWorkOptions()) -> int"""
  return _VISHNU.addWork(*args, **kwargs)

def cancelJob(*args, **kwargs):
  """cancelJob(string sessionKey, string machineId, string jobId) -> int"""
  return _VISHNU.cancelJob(*args, **kwargs)

def getJobInfo(*args, **kwargs):
  """
    getJobInfo(string sessionKey, string machineId, string jobId, 
        Job jobInfos) -> int
    """
  return _VISHNU.getJobInfo(*args, **kwargs)

def listJobs(*args, **kwargs):
  """listJobs(string sessionKey, string machineId, ListJobsOptions options = TMS_Data::ListJobsOptions()) -> int"""
  return _VISHNU.listJobs(*args, **kwargs)

def getJobProgress(*args, **kwargs):
  """getJobProgress(string sessionKey, string machineId, ProgressOptions options = TMS_Data::ProgressOptions()) -> int"""
  return _VISHNU.getJobProgress(*args, **kwargs)

def listQueues(*args, **kwargs):
  """listQueues(string sessionKey, string machineId, string queueName = std::string()) -> int"""
  return _VISHNU.listQueues(*args, **kwargs)

def getJobOutput(*args, **kwargs):
  """
    getJobOutput(string sessionKey, string machineId, string jobId, 
        JobResult outputInfo, string outDir = std::string()) -> int
    """
  return _VISHNU.getJobOutput(*args, **kwargs)

def getCompletedJobsOutput(*args, **kwargs):
  """getCompletedJobsOutput(string sessionKey, string machineId, string outDir = std::string()) -> int"""
  return _VISHNU.getCompletedJobsOutput(*args, **kwargs)

def exportCommands(*args, **kwargs):
  """
    exportCommands(string sessionKey, string oldSessionId, string filename, 
        ExportOp op = IMS_Data::ExportOp()) -> int
    """
  return _VISHNU.exportCommands(*args, **kwargs)

def getMetricCurrentValue(*args, **kwargs):
  """getMetricCurrentValue(string sessionKey, string machineId, CurMetricOp op = IMS_Data::CurMetricOp()) -> int"""
  return _VISHNU.getMetricCurrentValue(*args, **kwargs)

def getMetricHistory(*args, **kwargs):
  """getMetricHistory(string sessionKey, string machineId, MetricHistOp op = IMS_Data::MetricHistOp()) -> int"""
  return _VISHNU.getMetricHistory(*args, **kwargs)

def getProcesses(*args, **kwargs):
  """getProcesses(string sessionKey, ProcessOp op = IMS_Data::ProcessOp()) -> int"""
  return _VISHNU.getProcesses(*args, **kwargs)

def setSystemInfo(*args, **kwargs):
  """setSystemInfo(string sessionKey, SystemInfo sys) -> int"""
  return _VISHNU.setSystemInfo(*args, **kwargs)

def setSystemThreshold(*args, **kwargs):
  """setSystemThreshold(string sessionKey, Threshold threshold) -> int"""
  return _VISHNU.setSystemThreshold(*args, **kwargs)

def getSystemThreshold(*args, **kwargs):
  """getSystemThreshold(string sessionKey, ThresholdOp op = IMS_Data::ThresholdOp()) -> int"""
  return _VISHNU.getSystemThreshold(*args, **kwargs)

def loadShed(*args, **kwargs):
  """loadShed(string sessionKey, string machineId, LoadShedType loadShedType) -> int"""
  return _VISHNU.loadShed(*args, **kwargs)

def setUpdateFrequency(*args, **kwargs):
  """setUpdateFrequency(string sessionKey, int freq) -> int"""
  return _VISHNU.setUpdateFrequency(*args, **kwargs)

def getUpdateFrequency(*args, **kwargs):
  """getUpdateFrequency(string sessionKey, int freq) -> int"""
  return _VISHNU.getUpdateFrequency(*args, **kwargs)

def stop(*args, **kwargs):
  """stop(string sessionKey, string machineId, SupervisorOp op) -> int"""
  return _VISHNU.stop(*args, **kwargs)

def getSystemInfo(*args, **kwargs):
  """getSystemInfo(string sessionKey, SysInfoOp op = IMS_Data::SysInfoOp()) -> int"""
  return _VISHNU.getSystemInfo(*args, **kwargs)

def restart(*args, **kwargs):
  """restart(string sessionKey, string machineId, SupervisorOp op) -> int"""
  return _VISHNU.restart(*args, **kwargs)

def touch(*args, **kwargs):
  """touch(string sessionKey, string path) -> int"""
  return _VISHNU.touch(*args, **kwargs)

def chgrp(*args, **kwargs):
  """chgrp(string sessionKey, string group, string path) -> int"""
  return _VISHNU.chgrp(*args, **kwargs)

def chmod(*args, **kwargs):
  """chmod(string sessionKey, mode_t mode, string path) -> int"""
  return _VISHNU.chmod(*args, **kwargs)

def cp(*args, **kwargs):
  """cp(string sessionKey, string src, string dest, CpFileOptions options = FMS_Data::CpFileOptions()) -> int"""
  return _VISHNU.cp(*args, **kwargs)

def acp(*args, **kwargs):
  """
    acp(string sessionKey, string src, string dest, FileTransfer transferInfo, 
        CpFileOptions options = FMS_Data::CpFileOptions()) -> int
    """
  return _VISHNU.acp(*args, **kwargs)

def head(*args, **kwargs):
  """head(string sessionKey, string path, HeadOfFileOptions options = FMS_Data::HeadOfFileOptions()) -> int"""
  return _VISHNU.head(*args, **kwargs)

def more(*args, **kwargs):
  """more(string sessionKey, string path) -> int"""
  return _VISHNU.more(*args, **kwargs)

def ls(*args, **kwargs):
  """ls(string sessionKey, string path, LsDirOptions options = FMS_Data::LsDirOptions()) -> int"""
  return _VISHNU.ls(*args, **kwargs)

def mkdir(*args, **kwargs):
  """mkdir(string sessionKey, string path, CreateDirOptions options = FMS_Data::CreateDirOptions()) -> int"""
  return _VISHNU.mkdir(*args, **kwargs)

def mv(*args, **kwargs):
  """mv(string sessionKey, string src, string dest, CpFileOptions options = FMS_Data::CpFileOptions()) -> int"""
  return _VISHNU.mv(*args, **kwargs)

def amv(*args, **kwargs):
  """
    amv(string sessionKey, string src, string dest, FileTransfer transferInfo, 
        CpFileOptions options = FMS_Data::CpFileOptions()) -> int
    """
  return _VISHNU.amv(*args, **kwargs)

def rm(*args, **kwargs):
  """rm(string sessionKey, string path, RmFileOptions options = FMS_Data::RmFileOptions()) -> int"""
  return _VISHNU.rm(*args, **kwargs)

def rmdir(*args, **kwargs):
  """rmdir(string sessionKey, string path) -> int"""
  return _VISHNU.rmdir(*args, **kwargs)

def tail(*args, **kwargs):
  """tail(string sessionKey, string path, TailOfFileOptions options = FMS_Data::TailOfFileOptions()) -> int"""
  return _VISHNU.tail(*args, **kwargs)

def stat(*args, **kwargs):
  """stat(string sessionKey, string path, FileStat filesInfo) -> int"""
  return _VISHNU.stat(*args, **kwargs)

def stopFileTransfer(*args, **kwargs):
  """stopFileTransfer(string sessionKey, StopTransferOptions options = FMS_Data::StopTransferOptions()) -> int"""
  return _VISHNU.stopFileTransfer(*args, **kwargs)

def listFileTransfers(*args, **kwargs):
  """listFileTransfers(string sessionKey, LsTransferOptions options = FMS_Data::LsTransferOptions()) -> int"""
  return _VISHNU.listFileTransfers(*args, **kwargs)


