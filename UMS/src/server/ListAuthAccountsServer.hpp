/**
 * \file ListAuthAccountsServer.hpp
 * \brief This file contains the VISHNU QueryServer class.
 * \author Eug√®ne PAMBA CAPO-CHICHI (eugene.capochichi@sysfera.com)
 * \date February 2012
 */

#ifndef _LIST_AUTH_ACCOUNTS
#define _LIST_AUTH_ACCOUNTS

#include <string>
#include <vector>
#include <list>
#include <iostream>
#include "boost/date_time/posix_time/posix_time.hpp"

#include "SessionServer.hpp"
#include "QueryServer.hpp"

#include "ListAuthAccOptions.hpp"
#include "ListAuthAccounts.hpp"

/**
 * \class ListAuthAccountsServer
 * \brief ListAuthAccountsServer class implementation
 */
class ListAuthAccountsServer: public QueryServer<UMS_Data::ListAuthAccOptions, UMS_Data::ListAuthAccounts>
{

public:

  /**
   * \param session The object which encapsulates the session information (ex: identifier of the session)
   * \brief Constructor, raises an exception on error
   */
  ListAuthAccountsServer(const SessionServer session)
    : QueryServer<UMS_Data::ListAuthAccOptions, UMS_Data::ListAuthAccounts>(),
      mcommandName("vishnu_list_auth_accounts"),
      msessionServer(session)
  {
  }

  /**
   * \brief Function to treat the ListAuthAccountsServer options
   * \param userServer the object which encapsulates user information
   * \param options the object which contains the ListAuthAccountsServer options
   * \param query the sql data base request
   * \return raises an exception on error
   */
  void
  processOptions(UserServer userServer, const UMS_Data::ListAuthAccOptions_ptr& options, std::string& query)
  {

    if ((! userServer.isAdmin()) && (! options->getUserId().empty() || options->isListAll())) {
      throw UMSVishnuException (ERRCODE_NO_ADMIN);
    }

    //The admin option
    if(! options->getUserId().empty()) {
      addOptionRequest("users.userid", options->getUserId(), query);
    } else {
      if(! options->isListAll()) {
        addOptionRequest("users.userid", userServer.getData().getUserId(), query);
      }
    }

    if(! options->getAuthSystemId().empty()) {
      if (! options->isListAll() && options->getUserId().empty()) {
        addOptionRequest("users.userid", userServer.getData().getUserId(), query);
      }
      addOptionRequest("authsystem_numauthsystemid", options->getAuthSystemId(), query);
    }
  }

  /**
   * \brief Function to list locoal accounts information
   * \return The pointer to the UMS_Data::ListAuthAccounts containing auth accounts information
   * \return raises an exception on error
   */
  UMS_Data::ListAuthAccounts*
  list(UMS_Data::ListAuthAccOptions_ptr option)
  {
    std::string query =(boost::format("SELECT DISTINCT numauthsystemid, users.userid, aclogin"
                                      " FROM authaccount, authsystem, users"
                                      " WHERE authsystem_numauthsystemid=authsystem.numauthsystemid"
                                      "  AND authsystem.status!=%1%"
                                      "  AND users.status!=%1%"
                                      "  AND authaccount.status!=%1%"
                                      "  AND authaccount.users_numuserid=users.numuserid"
                                      "  AND authaccount.status!=%1%") % vishnu::STATUS_DELETED
                        ).str();

    std::vector<std::string>::iterator ii;
    std::vector<std::string> results;
    UMS_Data::UMS_DataFactory_ptr ecoreFactory = UMS_Data::UMS_DataFactory::_instance();
    mlistObject = ecoreFactory->createListAuthAccounts();


    //Creation of the object user
    UserServer userServer = UserServer(msessionServer);
    userServer.init();
    if (! userServer.exist()) {
      throw UMSVishnuException (ERRCODE_UNKNOWN_USER);
    }

    //To process options
    processOptions(userServer, option, query);

    boost::scoped_ptr<DatabaseResult> ListofAuthAccount (mdatabase->getResult(query.c_str()));
    if (ListofAuthAccount->getNbTuples() != 0){
      for (size_t i = 0; i < ListofAuthAccount->getNbTuples(); ++i) {
        results.clear();
        results = ListofAuthAccount->get(i);
        ii = results.begin();

        UMS_Data::AuthAccount_ptr authAccount = ecoreFactory->createAuthAccount();
        authAccount->setAuthSystemId(*ii);
        authAccount->setUserId(*(++ii));
        authAccount->setAcLogin(*(++ii));
        mlistObject->getAuthAccounts().push_back(authAccount);
      }
    }

    return mlistObject;
  }

  /**
   * \brief Function to get the name of the ListAuthAccountsServer command line
   * \return The the name of the ListAuthAccountsServer command line
   */
  std::string
  getCommandName()
  {
    return mcommandName;
  }

  /**
   * \brief Destructor, raises an exception on error
   */
  ~ListAuthAccountsServer()
  {
  }

private:

  /**
   * \brief The name of the ListAuthAccountsServer command line
   */
  std::string mcommandName;

  /**
  * \brief The SessionServer object containing the encrypted identifier of the session
  *  generated by VISHNU
  */
  SessionServer msessionServer;
};

#endif
