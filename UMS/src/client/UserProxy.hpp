/**
 * \file UserProxy.hpp
 * \brief This file contains the VISHNU UserProxy class.
 * \author Daouda Traore (daouda.traore@sysfera.com)
 * \date February 2011
 */
#ifndef _USER_PROXY_H_
#define _USER_PROXY_H_

#include <iostream>

#include "User.hpp"

class SessionProxy;

/**
 * \class UserProxy
 * \brief UserProxy class implementation
 */
class UserProxy
{

  public:

    /**
     * \brief Constructor, raises an exception on error
     * \param userId the user identifier
     * \param password the user password
     */
    UserProxy(const std::string& userId, const std::string& password);
    /**
     * \brief Constructor, raises an exception on error
     * \param session The object which encapsulates the session information (ex: identifier of the session)
     */
    explicit UserProxy(SessionProxy session);
    /**
     * \brief Constructor, raises an exception on error
     * \param user The object which encapsulates the user information
     */
    explicit UserProxy(const UMS_Data::User& user);
    /**
     * \brief Function to add new user
     * \param newUser The object which encapsulates the user information
     * \return raises an exception on error
     */
    int
    add(UMS_Data::User& newUser);
    /**
     * \brief Function to update user information
     * \param user The object which encapsulates the user information
     * \return raises an exception on error
     */
    int update(const UMS_Data::User& user);
    /**
     * \brief Function to remove user information
     * \param user The object which encapsulates the user information
     * \return raises an exception on error
     */
    int deleteUser(const UMS_Data::User& user);
    /**
     * \brief Function to change user password
     * \param oldPassword the old password of the user
     * \param newPassword the new password of the user
     * \return raises an exception on error
     */
    int changePassword(const std::string& oldPassword, const std::string& newPassword);
    /**
     * \brief Function to reset user password
     * \param user The object which encapsulates the user information
     * \return raises an exception on error
     */
    int resetPassword(UMS_Data::User& user);
    /**
     * \brief Function get user information
     * \return User object encapsulates the information of the user
     * \return raises an exception on error
     */
    UMS_Data::User getData() const;
    /**
     * \brief Function get SessionProxy object which contains the VISHNU session identifier
     * \return a SessionProy object which contains the VISHNU session information
     * \return raises an exception on error
     */
    SessionProxy getSessionProxy() const;

    /**
     * \brief Destructor, raises an exception on error
     */
    ~UserProxy();

  private:

    /////////////////////////////////
    // Attributes
    /////////////////////////////////

    /**
     * \brief The object which encapsulates the user information
     */
    UMS_Data::User muser;
    /**
     * \brief The pointer to the SessionProxy object containing the encrypted identifier of the session
     *  generated by VISHNU
     */
    SessionProxy* msessionProxy;

};
#endif
