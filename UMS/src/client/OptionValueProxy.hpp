/**
 * \file OptionValueProxy.hpp
 * \brief This file contains the VISHNU OptionValueProxy class.
 * \author Daouda Traore (daouda.traore@sysfera.com)
 * \date February 2011
 */
#ifndef _OPTION_VALUE_PROXY_H_
#define _OPTION_VALUE_PROXY_H_

#include "SessionProxy.hpp"
#include "OptionValue.hpp"

/**
 * \class OptionValueProxy
 * \brief OptionValueProxy class implementation
 */
class OptionValueProxy
{

  public:

    /**
     * \fn OptionValueProxy(const UMS_Data::OptionValue& optionValue,
     *                      const SessionProxy& session)
     * \param optionValue The object which encapsulates the information of the option
     * \param session The object which encapsulates the session information (ex: identifier of the session)
     * \brief Constructor, raises an exception on error
     */
    OptionValueProxy(const UMS_Data::OptionValue& optionValue, const SessionProxy& session);
    /**
     * \brief Function to configure an option of the user
     * \fn  int configureOption()
     * \return raises an exception on error
     */
    int configureOption();
    /**
     * \brief Function to configure a default option value
     * \fn  int configureDefaultOption()
     * \return raises an exception on error
     */
    int configureDefaultOption();
    /**
     * \brief Function get option information
     * \fn  UMS_Data::OptionValue getData()
     * \return OptionValue object encapsulates the information of the machine
     * \return raises an exception on error
     */
    UMS_Data::OptionValue getData();
    /**
     * \brief Function get SessionProxy object which contains the VISHNU session identifier
     * \fn SessionProxy getSessionProxy()
     * \return a SessionProy object which contains the VISHNU session information
     * \return raises an exception on error
     */
    SessionProxy getSessionProxy();
    /**
     * \fn ~OptionValueProxy()
     * \brief Destructor, raises an exception on error
     */
    ~OptionValueProxy();

  private:

    /**
     * \brief Function to combine configureOption() and configureDefaultOption() into one function
     * \fn  int setOptionValue(bool defaultValue=true);
     * \param defaultValue to select the call of configureOption() or configureOption() function
     * \return raises an exception on error
     */
    int setOptionValue(bool defaultValue=true);

    /////////////////////////////////
    // Attributes
    /////////////////////////////////

    /**
     * \brief The object which encapsulates the option information
     */
    UMS_Data::OptionValue moptionValue;
    /**
     * \brief The SessionProxy object containing the encrypted identifier of the session
     *  generated by VISHNU
     */
    SessionProxy msessionProxy;
};
#endif
