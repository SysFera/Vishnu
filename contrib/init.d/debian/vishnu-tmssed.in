#!/bin/sh
### BEGIN INIT INFO
# Provides:          vishnu-tmssed
# Required-Start:    $network $local_fs $remote_fs
# Required-Stop:     $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Vishnu task management broker
# Description:       The tmssed service is the gateway to the batch system
### END INIT INFO

# Author: Haïkel Guémar <haikel.guemar@sysfera.com>

PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="Vishnu interface batch system"
NAME=tmssed
CONFIG_FILE="/etc/vishnu.cfg"
DAEMON=@CMAKE_INSTALL_PREFIX@/sbin/$NAME
DAEMON_ARGS="$CONFIG_FILE"
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/vishnu-$NAME

# Exit if the package is not installed
[ -x $DAEMON ] || exit 0

if [ -e /etc/default/sysfera ]; then
	. /etc/default/sysfera
else
  CONFIG_VISHNU=/etc/vishnu.cfg
  START_DISPATCHER=yes
fi

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started

	USER=""
	if [ ! -z "$SYSFERA_USER_UID" ] ; then
		USER="--chuid $SYSFERA_USER_UID"
	fi

	start-stop-daemon --background --start --quiet --pidfile $PIDFILE --exec $DAEMON --test \
		$USER || return 1
	start-stop-daemon --background --make-pidfile --start --quiet --pidfile $PIDFILE \
		--exec $DAEMON $USER -- $DAEMON_ARGS  || return 2
	# Add code here, if necessary, that waits for the process to be ready
	# to handle requests from services started subsequently which depend
	# on this one.  As a last resort, sleep for some time.
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	USER=""
	if [ ! -z "$SYSFERA_USER_UID" ] ; then
		USER="--user $SYSFERA_USER_UID"
	fi

	start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --name $NAME $USER
	RETVAL="$?"
	[ "$RETVAL" = 2 ] && return 2
	# Wait for children to finish too if this is a daemon that forks
	# and if the daemon is only ever run from this initscript.
	# If the above conditions are not satisfied then add some other code
	# that waits for the process to drop all resources that could be
	# needed by services started subsequently.  A last resort is to
	# sleep for some time.
	start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 $USER --exec $DAEMON
	[ "$?" = 2 ] && return 2
	# Many daemons don't delete their pidfiles when they exit.
	rm -f $PIDFILE
	return "$RETVAL"
}

case "$1" in
  start)
    [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC " "$NAME"
    do_start
    case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
  ;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  status)
       status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
       ;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
	  	# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	echo "Usage: $SCRIPTNAME {start|stop|status|restart}" >&2
	exit 3
	;;
esac

:
